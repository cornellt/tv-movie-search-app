{"version":3,"sources":["components/SearchBox.js","components/NavigationBar.js","components/HomePage.js","components/expanded_result/PersonCastRole.js","components/expanded_result/Person.js","components/expanded_result/Recommendation.js","components/expanded_result/Movie.js","components/expanded_result/TVShow.js","components/ExpandedResult.js","components/SearchResultItem.js","components/SearchResultsPage.js","components/App.js","index.js"],"names":["SearchBox","handleChange","input","props","onSearchBoxChange","target","value","Form","onSubmit","this","handleSubmit","Control","className","size","htmlSize","type","placeholder","onChange","inputText","React","Component","NavigationBar","event","preventDefault","searchRequest","Navbar","fixed","bg","variant","Brand","onClick","returnToHomePage","Nav","Button","HomePage","Image","src","Container","fluid","href","rel","POSTER_BASE_URL","PLACEHOLDER_POSTER_URL","PersonCastRole","handleChangeFocus","data","path","castRoleData","Card","id","Img","buildPosterUrl","poster_path","Body","Title","character","Text","media_type","title","name","index","Person","state","combinedCredits","length","fetchCombinedCredits","a","combinedCreditsRequestUrl","API_BASE_URL","axios","get","response","console","log","setState","cast","popularContributions","i","item","Footer","CardGroup","map","result","bioData","biography","birthday","formatDate","deathday","compiledItemJsx","compileBio","handleReturnToResults","Row","Col","lg","profile_path","buildPopularRolesList","Recommendation","recommendationData","buildBackdropUrl","backdrop_path","overview","Movie","resultPosterPath","genres","genreString","substr","homepage","recommendations","resultName","resultPrimaryInfo","release_date","runtime","formatRuntime","buildGenreList","buildHomepageJsx","buildBudgetJsx","buildBoxOfficeJsx","buildNetProfitJsx","resultOverview","budget","formatCurrency","revenue","net","formattedNet","netStyling","Intl","NumberFormat","style","currency","format","Math","floor","compileMovieData","tagline","buildRecommendationSectionJsx","TVShow","seasons","seasonArray","forEach","element","season_number","push","Table","striped","bordered","episode_count","inProd","in_production","color","first_air_date","last_air_date","number_of_seasons","number_of_episodes","buildSeasonsTable","compileTvShowData","ExpandedResult","expandedData","itemToFocus","fetchData","resultType","resultDetailsRequestUrl","results","window","scrollTo","renderType","SearchResultItem","handleClick","expandResult","known_for","contributionTitle","contribution","resultTitle","resultRelease","formattedReleaseDate","ListGroup","Item","contributionsJsx","buildContributionList","horizontal","buildContributionPosterUrl","known_for_department","buildJsx","SearchResultsPage","isShowingExpandedResult","expandedResultData","handleExpandResult","handleReturnFromExpandedResult","dateString","formattedDateSplit","Date","toDateString","split","searchData","buildPageJsx","SECRET_API_KEY","App","isShowingResults","searchBoxInput","handleChangeSearchInput","query","searchRequestUrl","displayPage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.93bd61f4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles/SearchBox.css';\r\nimport Form from 'react-bootstrap/Form'; //sourced from https://react-bootstrap.netlify.app/components/forms/\r\n\r\nclass SearchBox extends React.Component {\r\n    //handle input text-box value changing\r\n    handleChange = (input) => {\r\n        this.props.onSearchBoxChange(input.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form onSubmit={this.props.handleSubmit}>\r\n                <Form.Control className='border border-secondary text-center' size={this.props.size} htmlSize='36' type='text' placeholder='Search for a TV show, Movie, or Actor' onChange={this.handleChange} value={this.props.inputText} />\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport './styles/NavigationBar.css';\r\nimport SearchBox from './SearchBox';\r\nimport Nav from 'react-bootstrap/Nav' //sourced from https://react-bootstrap.netlify.app/components/navs/\r\nimport Navbar from 'react-bootstrap/Navbar' //sourced from https://react-bootstrap.netlify.app/components/navbar/\r\nimport Button from 'react-bootstrap/Button'; //sourced from https://react-bootstrap.netlify.app/components/buttons/\r\n\r\nclass NavigationBar extends React.Component {\r\n    //handle Search form submission    \r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.searchRequest(this.props.inputText);\r\n    }\r\n\r\n    //Navbar component sourced from react-bootstrap\r\n    render() {\r\n        return (\r\n            <Navbar fixed='top' bg='dark' variant='dark' className='mb-3'>\r\n                <Navbar.Brand className='home-button' onClick={this.props.returnToHomePage}>TV & Movie Searching App</Navbar.Brand>\r\n                <Nav className='mr-auto'>\r\n                </Nav>\r\n                <SearchBox size='md' handleSubmit={this.handleSubmit} onSearchBoxChange={this.props.onSearchBoxChange} inputText={this.props.inputText} />\r\n                <Button className='mx-2' variant='outline-secondary' onClick={this.handleSubmit}>Search</Button>\r\n            </Navbar >\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavigationBar;","import React from 'react';\r\nimport './styles/HomePage.css';\r\nimport SearchBox from './SearchBox';\r\nimport Container from 'react-bootstrap/Container'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport Image from 'react-bootstrap/Image'; //sourced from https://react-bootstrap.netlify.app/components/images/\r\nimport Button from 'react-bootstrap/Button'; //sourced from https://react-bootstrap.netlify.app/components/buttons/\r\n\r\nconst backgroundImageUrl = 'https://images.unsplash.com/photo-1489599849927-2ee91cede3ba?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1350&q=80'; //background image sourced from unsplash.com\r\n\r\nclass HomePage extends React.Component {\r\n    //handle Search form submission    \r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.searchRequest(this.props.inputText);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Image className='hero-img' src={backgroundImageUrl} />\r\n                <Container fluid>\r\n                    <Container fluid className='w-75 search-area'>\r\n                        <SearchBox size='lg' handleSubmit={this.handleSubmit} onSearchBoxChange={this.props.onSearchBoxChange} inputText={this.props.inputText} />\r\n                        <Button variant='secondary' onClick={this.handleSubmit} className='m-2'>Search</Button>\r\n                    </Container>\r\n                </Container>\r\n                <footer className='footer footer-dark'>\r\n                    <span className='footer-text'>This product uses the <a className='tmdb-link' href='https://www.themoviedb.org/documentation/api' rel='noreferrer' target='_blank'>TMDb API</a> but is not endorsed or certified by TMDb.</span>\r\n                </footer>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomePage;","import React from 'react';\r\nimport Card from 'react-bootstrap/Card'; //sourced from https://react-bootstrap.netlify.app/components/cards/\r\n\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500';\r\n//const PLACEHOLDER_BACKDROP_URL = 'https://fakeimg.pl/640x360'; //placeholder sourced from https://fakeimg.pl/640x360\r\nconst PLACEHOLDER_POSTER_URL = 'https://i2.wp.com/www.theatrecr.org/wp-content/uploads/2016/01/poster-placeholder.png?ssl=1'; //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n\r\nclass PersonCastRole extends React.Component {\r\n    //handler for Popular Role onClick; changes \"focused\" ExpandedResult\r\n    handleChangeFocus = () => this.props.handleChangeFocus(this.props.data);\r\n\r\n    //build URL to access movie/tv \"backdrop\" image\r\n    buildBackdropUrl(path) {\r\n        return path === null ? PLACEHOLDER_POSTER_URL : POSTER_BASE_URL + path;\r\n    }\r\n\r\n    //build URL to access person's portrait\r\n    buildPosterUrl(path) {\r\n        return path ? (POSTER_BASE_URL + path) : PLACEHOLDER_POSTER_URL;\r\n    }\r\n\r\n    render() {\r\n        const castRoleData = this.props.data;\r\n\r\n        return (\r\n            <>\r\n                <Card key={this.props.index} className='cast-card shadow-sm mx-1 my-1' onClick={this.handleChangeFocus} id={castRoleData.id}>\r\n                    <Card.Img className='cast-poster mt-1 mx-auto' variant=\"top\" src={this.buildPosterUrl(castRoleData.poster_path)} />\r\n                    <Card.Body>\r\n                        <Card.Title>{castRoleData.character}</Card.Title>\r\n                        <Card.Text className='text-muted'><span>in </span><br />{castRoleData.media_type === 'movie' ? castRoleData.title : castRoleData.name}</Card.Text>\r\n                    </Card.Body>\r\n                </Card>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PersonCastRole;","import React from 'react';\r\nimport axios from 'axios';\r\nimport './expanded_result_styles/Person.css';\r\nimport PersonCastRole from './PersonCastRole';\r\nimport Button from 'react-bootstrap/Button'; //sourced from https://react-bootstrap.netlify.app/components/buttons/\r\nimport Card from 'react-bootstrap/Card'; //sourced from https://react-bootstrap.netlify.app/components/cards/\r\nimport Col from 'react-bootstrap/Col'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport Row from 'react-bootstrap/Row'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport CardGroup from 'react-bootstrap/CardGroup'; //sourced from https://react-bootstrap.netlify.app/components/cards/#card-groups\r\n\r\nconst SECRET_API_KEY = '8aaeb5fa2472dd850f957c983d0bb2e1';\r\nconst API_BASE_URL = 'https://api.themoviedb.org/3/';\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\r\nconst PLACEHOLDER_POSTER_URL = 'https://i2.wp.com/www.theatrecr.org/wp-content/uploads/2016/01/poster-placeholder.png?ssl=1'; //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\nconst PLACEHOLDER_BACKDROP_URL = 'https://fakeimg.pl/640x360'; //placeholder sourced from https://fakeimg.pl/640x360\r\n\r\nclass Person extends React.Component {\r\n    state = {\r\n        combinedCredits: []\r\n    }\r\n\r\n    //make AJAX request when component fully loads\r\n    componentDidMount() {\r\n        if (this.props.data.id && this.state.combinedCredits.length === 0)\r\n            this.fetchCombinedCredits(this.props.data);\r\n    }\r\n\r\n    //build URL to access movie/tv \"backdrop\" image for popular roles\r\n    buildBackdropUrl(path) {\r\n        return path === null ? PLACEHOLDER_BACKDROP_URL : POSTER_BASE_URL + path;\r\n    }\r\n\r\n    //build URL to access person's portrait\r\n    buildPosterUrl(path) {\r\n        return path ? (POSTER_BASE_URL + path) : PLACEHOLDER_POSTER_URL;\r\n    }\r\n\r\n    //3rd AJAX Request: fetch combined TV and Movie credits for Person\r\n    async fetchCombinedCredits(data) {\r\n        if (data.id) {\r\n            const combinedCreditsRequestUrl = API_BASE_URL + 'person/' + data.id + '/combined_credits?api_key=' + SECRET_API_KEY + '&language=en-US';\r\n\r\n            try {\r\n                const response = await axios.get(combinedCreditsRequestUrl);\r\n                console.log(response);\r\n                this.setState({\r\n                    combinedCredits: response.data.cast\r\n                });\r\n            }\r\n            catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    //build JSX for Popular Roles cards\r\n    buildPopularRolesList() {\r\n        let popularContributions = [];\r\n\r\n        if (this.state.combinedCredits.length > 0) {\r\n            for (let i = 0; (i < 30) && (i < this.state.combinedCredits.length); i++) {\r\n                const item = this.state.combinedCredits[i];\r\n                popularContributions = [...popularContributions, item];\r\n            }\r\n\r\n            return (\r\n                <Card.Footer>\r\n                    <Card.Title className='mx-auto'><h2>Popular Roles</h2></Card.Title>\r\n                    <CardGroup>\r\n                        {popularContributions.map((item, index) =>\r\n                            <PersonCastRole key={index} data={item} handleChangeFocus={this.props.handleChangeFocus} />\r\n                        )}\r\n                    </CardGroup>\r\n                </Card.Footer>\r\n            );\r\n        }\r\n    }\r\n\r\n    //returns Object containing some compiled Person info including name and biography\r\n    compileBio(result) {\r\n        const bioData = {\r\n            name: result.name,\r\n            biography: '',\r\n            birthday: ''\r\n        }\r\n\r\n        if (result.biography) {\r\n            bioData.biography =\r\n                (<>\r\n                    <h3>Biography</h3>\r\n                    <hr />\r\n                    <Card.Text>\r\n                        {result.biography}\r\n                    </Card.Text>\r\n                </>)\r\n        }\r\n        if (result.birthday) {\r\n            bioData.birthday = <h4>Born on {this.props.formatDate(result.birthday)}</h4>;\r\n        }\r\n        if (result.deathday) {\r\n            bioData.deathday = <h4>Died on {this.props.formatDate(result.deathday)}</h4>;\r\n        }\r\n\r\n        return bioData;\r\n    }\r\n\r\n    render() {\r\n        const compiledItemJsx = this.compileBio(this.props.data);\r\n\r\n        return (\r\n            <Card className='mx-auto my-3 outer-result-card'>\r\n                <Card className='inner-result-card'>\r\n                    <Button className='mx-auto' variant=\"primary\" onClick={this.props.handleReturnToResults}>Return to Search Results</Button>\r\n                    <Row>\r\n                        <Col lg className='my-3 ml-1'>\r\n                            <Card.Title>\r\n                                <h1 className='display-4'>{compiledItemJsx.name}</h1>\r\n                                <Card.Img className='my-3 my-2 poster w-75' variant=\"top\" src={this.buildPosterUrl(this.props.data.profile_path)} />\r\n                                {compiledItemJsx.birthday}\r\n                                {compiledItemJsx.deathday}\r\n                            </Card.Title>\r\n                        </Col>\r\n                        <Col lg className='mx-3'>\r\n                            <Card.Body>\r\n                                {compiledItemJsx.biography}\r\n                            </Card.Body>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className='mx-auto my-2'>\r\n                        <Button variant=\"primary\" onClick={this.props.handleReturnToResults}>Return to Search Results</Button>\r\n                    </Row>\r\n                </Card>\r\n                {this.buildPopularRolesList()}\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Person;","import React from 'react';\r\nimport Card from 'react-bootstrap/Card'; //sourced from https://react-bootstrap.netlify.app/components/cards/\r\n\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500';\r\nconst PLACEHOLDER_POSTER_URL = 'https://fakeimg.pl/640x360'; //placeholder sourced from https://fakeimg.pl/640x360\r\n\r\nclass Recommendation extends React.Component {\r\n    //handler for Recommendation onClick; changes \"focused\" ExpandedResult\r\n    handleChangeFocus = () => this.props.handleChangeFocus(this.props.data);\r\n\r\n    //build URL to access movie/tv \"backdrop\" image\r\n    buildBackdropUrl(path) {\r\n        return path === null ? PLACEHOLDER_POSTER_URL : POSTER_BASE_URL + path;\r\n    }\r\n\r\n    render() {\r\n        const recommendationData = this.props.data;\r\n\r\n        return (\r\n            <>\r\n                <Card key={this.props.index} className='recommendation-card shadow-sm my-1 mx-1' onClick={this.handleChangeFocus}>\r\n                    <Card.Img variant=\"top recommendation-img\" src={this.buildBackdropUrl(recommendationData.backdrop_path)} />\r\n                    <Card.Body>\r\n                        <Card.Title>{recommendationData.media_type === 'tv' ? recommendationData.name : recommendationData.title}</Card.Title>\r\n                        <Card.Text className='text-muted'>{recommendationData.overview}</Card.Text>\r\n                    </Card.Body>\r\n                </Card>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Recommendation;","import React from 'react';\r\nimport Recommendation from './Recommendation';\r\nimport Button from 'react-bootstrap/Button'; //sourced from https://react-bootstrap.netlify.app/components/buttons/\r\nimport Card from 'react-bootstrap/Card'; //sourced from https://react-bootstrap.netlify.app/components/cards/\r\nimport Col from 'react-bootstrap/Col'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport Row from 'react-bootstrap/Row'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport CardGroup from 'react-bootstrap/CardGroup'; //sourced from https://react-bootstrap.netlify.app/components/cards/#card-groups\r\n\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\r\nconst PLACEHOLDER_POSTER_URL = 'https://i2.wp.com/www.theatrecr.org/wp-content/uploads/2016/01/poster-placeholder.png?ssl=1'; //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\nconst PLACEHOLDER_BACKDROP_URL = 'https://fakeimg.pl/640x360'; //placeholder sourced from https://fakeimg.pl/640x360\r\n\r\nclass Movie extends React.Component {\r\n    //build URL to access movie/tv \"backdrop\" image for popular roles\r\n    buildBackdropUrl(path) {\r\n        return path === null ? PLACEHOLDER_BACKDROP_URL : POSTER_BASE_URL + path;\r\n    }\r\n\r\n    //build URL to access movie/tv poster or person portrait\r\n    buildPosterUrl() {\r\n        const resultPosterPath = this.props.data.poster_path;\r\n        return resultPosterPath ? (POSTER_BASE_URL + resultPosterPath) : PLACEHOLDER_POSTER_URL;\r\n    }\r\n\r\n    //Build genre String + JSX for TV Show/Movie\r\n    buildGenreList(data) {\r\n        if (data.genres && data.genres.length > 0) {\r\n            let genreString = 'Genre(s): '\r\n\r\n            for (const genre of data.genres) {\r\n                genreString += (genre.name + ', ');\r\n            }\r\n\r\n            genreString = genreString.substr(0, genreString.length - 2);\r\n            return <h5>{genreString}</h5>;\r\n        }\r\n    }\r\n\r\n    //if homepage link exists, build and return corresponding JSX object\r\n    buildHomepageJsx(data) {\r\n        if ((data.homepage !== null) && (data.homepage !== ''))\r\n            return <h5><a href={data.homepage} target='_blank' rel=\"noreferrer\">Link to Homepage</a></h5>;\r\n    }\r\n\r\n    //if recommendations exist, build and return Recommendations Section JSX object\r\n    buildRecommendationSectionJsx() {\r\n        if (this.props.recommendations.length > 0) { //only build Recommendation section if recommendations exist\r\n            return (\r\n                <Card.Footer>\r\n                    <Card.Title className='mx-auto'><h2>You Might Also Be Interested In</h2></Card.Title>\r\n                    <CardGroup>\r\n                        {this.props.recommendations.map((item, index) =>\r\n                            <Recommendation key={index} index={index} data={item} handleChangeFocus={this.props.handleChangeFocus} />\r\n                        )}\r\n                    </CardGroup>\r\n                </Card.Footer>\r\n            );\r\n        }\r\n    }\r\n\r\n    //returns Object containing some compiled Movie info/JSX for compileItemJsx() function\r\n    compileMovieData(result) {\r\n        return {\r\n            resultName: result.title,\r\n            resultPrimaryInfo: (\r\n                <>\r\n                    <h3>Release Date: {this.props.formatDate(result.release_date)}</h3>\r\n                    {(result.runtime > 0) ? (<h5>Runtime: {this.formatRuntime(result.runtime)}</h5>) : null}\r\n                    {this.buildGenreList(result)}\r\n                    {this.buildHomepageJsx(result)}\r\n                    <hr />\r\n                    <span className='text-right'>\r\n                        {this.buildBudgetJsx(result)}\r\n                        {this.buildBoxOfficeJsx(result)}\r\n                        {this.buildNetProfitJsx(result)}\r\n                    </span>\r\n                    <hr />\r\n                    <h4>Overview</h4>\r\n                </>\r\n            ),\r\n            resultOverview: result.overview\r\n        }\r\n    }\r\n\r\n    //if budget data exists, build and return formatted budget info\r\n    buildBudgetJsx(result) {\r\n        if (result.budget && result.budget > 0) {\r\n            const budget = this.formatCurrency(result.budget);\r\n            return <h5>Budget: {budget}</h5>;\r\n        }\r\n    }\r\n\r\n    //if revenue data exists, build and return formatted revenue info\r\n    buildBoxOfficeJsx(result) {\r\n        if (result.revenue && result.revenue > 0) {\r\n            const revenue = this.formatCurrency(result.revenue);\r\n            return <h5>Box Office Revenue: {revenue}</h5>;\r\n        }\r\n    }\r\n\r\n    //if both budget and revenue data exist, build and return net profit info with appropriate styling based on positive/negative value\r\n    buildNetProfitJsx(result) {\r\n        if ((result.revenue && result.revenue > 0) && (result.budget && result.budget > 0)) {\r\n            const net = (result.revenue - result.budget);\r\n            const formattedNet = this.formatCurrency(net);\r\n            const netStyling = (net >= 0) ? 'net-positive' : 'net-negative';\r\n            return <h5 className={netStyling}>Net Income: {formattedNet}</h5>;\r\n        }\r\n    }\r\n\r\n    //convert plain currency number into formatted string\r\n    //formatting syntax sourced from https://www.samanthaming.com/tidbits/30-how-to-format-currency-in-es6/\r\n    formatCurrency(value) {\r\n        return new Intl.NumberFormat('en-US',\r\n            { style: 'currency', currency: 'USD' }\r\n        ).format(value);\r\n    }\r\n\r\n    //convert mins to hr:min\r\n    formatRuntime(runtime) {\r\n        if (runtime && runtime > 59) {\r\n            return `${Math.floor(runtime / 60)} hrs, ${runtime % 60} min`;\r\n        }\r\n\r\n        return `${runtime} min`;\r\n    }\r\n\r\n    render() {\r\n        let compiledItemJsx = this.compileMovieData(this.props.data);\r\n\r\n        return (\r\n            <Card className='mx-auto my-3 outer-result-card'>\r\n                <Card className='inner-result-card'>\r\n                    <Button className='mx-auto' variant=\"primary\" onClick={this.props.handleReturnToResults}>Return to Search Results</Button>\r\n                    <Row>\r\n                        <Col lg className='mx-2'>\r\n                            <Card.Title className='mb-0 mt-1'>\r\n                                <Card.Text className='text-muted'>{this.props.data.tagline}</Card.Text>\r\n                                <Card.Img className='mx-auto my-2 poster w-75' variant=\"top\" src={this.buildPosterUrl()} />\r\n                            </Card.Title>\r\n                        </Col>\r\n                        <Col lg className='mx-auto'>\r\n                            <Card.Body>\r\n                                <h1 className='display-4'>{compiledItemJsx.resultName}</h1>\r\n                                <h5 className='text-muted'>Movie</h5>\r\n                                <hr />\r\n                                {compiledItemJsx.resultPrimaryInfo}\r\n                                {compiledItemJsx.resultOverview}\r\n                            </Card.Body>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className='mx-auto my-2'>\r\n                        <Button variant=\"primary\" onClick={this.props.handleReturnToResults}>Return to Search Results</Button>\r\n                    </Row>\r\n                </Card>\r\n                {this.buildRecommendationSectionJsx()}\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Movie;","import React from 'react';\r\nimport Recommendation from './Recommendation';\r\nimport Button from 'react-bootstrap/Button'; //sourced from https://react-bootstrap.netlify.app/components/buttons/\r\nimport Card from 'react-bootstrap/Card'; //sourced from https://react-bootstrap.netlify.app/components/cards/\r\nimport Col from 'react-bootstrap/Col'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport Row from 'react-bootstrap/Row'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport Table from 'react-bootstrap/Table'; //sourced from https://react-bootstrap.netlify.app/components/table/\r\nimport CardGroup from 'react-bootstrap/CardGroup'; //sourced from https://react-bootstrap.netlify.app/components/cards/#card-groups\r\n\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\r\nconst PLACEHOLDER_POSTER_URL = 'https://i2.wp.com/www.theatrecr.org/wp-content/uploads/2016/01/poster-placeholder.png?ssl=1'; //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\nconst PLACEHOLDER_BACKDROP_URL = 'https://fakeimg.pl/640x360'; //placeholder sourced from https://fakeimg.pl/640x360\r\n\r\nclass TVShow extends React.Component {\r\n    //build URL to access movie/tv \"backdrop\" image for popular roles\r\n    buildBackdropUrl(path) {\r\n        return path === null ? PLACEHOLDER_BACKDROP_URL : POSTER_BASE_URL + path;\r\n    }\r\n\r\n    //build URL to access movie/tv poster or person portrait\r\n    buildPosterUrl() {\r\n        const resultPosterPath = this.props.data.poster_path;\r\n        return resultPosterPath ? (POSTER_BASE_URL + resultPosterPath) : PLACEHOLDER_POSTER_URL;\r\n    }\r\n\r\n    //if homepage link exists, build and return corresponding JSX object\r\n    buildHomepageJsx(result) {\r\n        if ((result.homepage !== null) && (result.homepage !== ''))\r\n            return <h5><a href={result.homepage} target='_blank' rel=\"noreferrer\">Link to Homepage</a></h5>;\r\n    }\r\n\r\n    //if recommendations exist, build and return Recommendations Section JSX object\r\n    buildRecommendationSectionJsx() {\r\n        if (this.props.recommendations.length > 0) { //only build Recommendation section if recommendations exist\r\n            return (\r\n                <Card.Footer>\r\n                    <Card.Title className='mx-auto'><h2>You Might Also Be Interested In</h2></Card.Title>\r\n                    <CardGroup>\r\n                        {this.props.recommendations.map((item, index) =>\r\n                            <Recommendation key={index} index={index} data={item} handleChangeFocus={this.props.handleChangeFocus} />\r\n                        )}\r\n                    </CardGroup>\r\n                </Card.Footer>\r\n            );\r\n        }\r\n    }\r\n\r\n    //Build react-bootstrap Table for TV Show seasons info\r\n    buildSeasonsTable() {\r\n        if (this.props.data.seasons) {\r\n            const seasonArray = []; //const variables cannot be reassigned BUT are NOT immutable -- we can still mutate the array's properties\r\n\r\n            this.props.data.seasons.forEach(element => {\r\n                if (element.season_number !== 0) //we ignore the 0th season's data because those are 'extra' episodes\r\n                    seasonArray.push(element); //append season to end of seasonArray\r\n            });\r\n\r\n            return (\r\n                <Table striped bordered size='sm' className='my-3'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Season #</th>\r\n                            <th>Episode Count</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {seasonArray.map((item, index) =>\r\n                            <tr key={index}>\r\n                                <td>{index + 1}</td>\r\n                                <td>{item.episode_count}</td>\r\n                            </tr>\r\n                        )}\r\n                    </tbody>\r\n                </Table>\r\n            );\r\n        }\r\n    }\r\n\r\n    //Build genre String + JSX for TV Show/Movie\r\n    buildGenreList(data) {\r\n        if (data.genres && data.genres.length > 0) {\r\n            let genreString = 'Genre(s): '\r\n\r\n            for (const genre of data.genres) {\r\n                genreString += (genre.name + ', ');\r\n            }\r\n\r\n            genreString = genreString.substr(0, genreString.length - 2);\r\n            return <h5>{genreString}</h5>;\r\n        }\r\n    }\r\n\r\n    //returns Object containing some compiled TV Show info/JSX for compileItemJsx() function\r\n    compileTvShowData(result) {\r\n        const inProd = result.in_production;\r\n        const color = inProd ? 'net-positive' : 'net-negative';\r\n        return {\r\n            resultName: result.name,\r\n            resultPrimaryInfo: (\r\n                <>\r\n                    <h3>First Air Date: {this.props.formatDate(result.first_air_date)}</h3>\r\n                    {inProd ? <h3>Recent Air Date: {this.props.formatDate(result.last_air_date)}</h3> : <h3>Final Air Date: {this.props.formatDate(result.last_air_date)}</h3>}\r\n                    <h4 className={color}>{inProd ? 'Still in production' : 'No longer in production'}</h4>\r\n                    {this.buildGenreList(result)}\r\n                    <br />\r\n                    <h5>Number of Seasons: {result.number_of_seasons}</h5>\r\n                    <h5>Number of Episodes: {result.number_of_episodes}</h5>\r\n                    {this.buildHomepageJsx(result)}\r\n                    <hr />\r\n                    <h4>Overview</h4>\r\n                </>\r\n            ),\r\n            resultOverview: (\r\n                <>\r\n                    <Card.Text className='w-75 mx-auto'>\r\n                        {result.overview}\r\n                    </Card.Text>\r\n                    {this.buildSeasonsTable()}\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let compiledItemJsx = this.compileTvShowData(this.props.data);\r\n        console.log(this.props);\r\n\r\n        return (\r\n            <Card className='mx-auto my-3 outer-result-card'>\r\n                <Card className='inner-result-card'>\r\n                    <Button className='mx-auto' variant=\"primary\" onClick={this.props.handleReturnToResults}>Return to Search Results</Button>\r\n                    <Row>\r\n                        <Col lg className='mx-2'>\r\n                            <Card.Title className='mb-0 mt-1'>\r\n                                <Card.Text className='text-muted'>{this.props.data.tagline}</Card.Text>\r\n                                <Card.Img className='mx-auto my-2 poster w-75' variant=\"top\" src={this.buildPosterUrl()} />\r\n                            </Card.Title>\r\n                        </Col>\r\n                        <Col lg className='mx-auto'>\r\n                            <Card.Body>\r\n                                <h1 className='display-4'>{compiledItemJsx.resultName}</h1>\r\n                                <h5 className='text-muted'>TV Show</h5>\r\n                                <hr />\r\n                                {compiledItemJsx.resultPrimaryInfo}\r\n                                {compiledItemJsx.resultOverview}\r\n                            </Card.Body>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className='mx-auto my-2'>\r\n                        <Button variant=\"primary\" onClick={this.props.handleReturnToResults}>Return to Search Results</Button>\r\n                    </Row>\r\n                </Card>\r\n                {this.buildRecommendationSectionJsx()}\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TVShow;","import React from 'react';\r\nimport axios from 'axios';\r\nimport './styles/ExpandedResult.css';\r\nimport Person from './expanded_result/Person';\r\nimport Movie from './expanded_result/Movie';\r\nimport TVShow from './expanded_result/TVShow';\r\n\r\nconst SECRET_API_KEY = '8aaeb5fa2472dd850f957c983d0bb2e1';\r\nconst API_BASE_URL = 'https://api.themoviedb.org/3/';\r\n\r\nclass ExpandedResult extends React.Component {\r\n    state = {\r\n        expandedData: {},\r\n        recommendations: []\r\n    }\r\n\r\n    //make AJAX request when component loads\r\n    componentDidMount() { this.fetchData(this.props.data); }\r\n\r\n    //handle changing \"focused\" ExpandedResult item (occurs when a recommendation is clicked on)\r\n    handleChangeFocus = (itemToFocus) => this.fetchData(itemToFocus);\r\n\r\n    //handler for 'Return to Results' button; closes ExpandedResult and restores SearchResultsPage\r\n    handleReturnToResults = () => this.props.handleReturnToResults();\r\n\r\n    //return formatted String for each media_type\r\n    resultType() {\r\n        const resultType = this.state.expandedData.media_type;\r\n\r\n        if (resultType === 'movie')\r\n            return 'Movie';\r\n        else if (resultType === 'tv')\r\n            return 'TV Show';\r\n        else if (resultType === 'person')\r\n            return 'Person';\r\n    }\r\n\r\n    //2nd AJAX Request: fetch full data for \"expanded\" Movie/TV Show/Person + appended recommendations data\r\n    async fetchData(data) {\r\n        const resultDetailsRequestUrl = API_BASE_URL + data.media_type + '/' + data.id + '?api_key=' + SECRET_API_KEY + '&language=en-US&append_to_response=recommendations,credits';\r\n\r\n        try {\r\n            const response = await axios.get(resultDetailsRequestUrl);\r\n\r\n            this.setState({\r\n                expandedData: response.data,\r\n                recommendations: (response.data.recommendations) ? response.data.recommendations.results : [] //recommendations only exist for Movies/TV Shows (so we only update recommendations if the data exists)\r\n            });\r\n\r\n            window.scrollTo(0, 0);\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    renderType() {\r\n        let result = this.state.expandedData;\r\n        console.log(result);\r\n        if (result.birthday) {\r\n            return <Person data={this.state.expandedData} handleReturnToResults={this.handleReturnToResults} handleChangeFocus={this.handleChangeFocus} formatDate={this.props.formatDate} />;\r\n        }\r\n        else if (result.title) {\r\n            return <Movie data={this.state.expandedData} recommendations={this.state.recommendations} handleReturnToResults={this.handleReturnToResults} handleChangeFocus={this.handleChangeFocus} formatDate={this.props.formatDate} />;\r\n        }\r\n        else {\r\n            return <TVShow data={this.state.expandedData} recommendations={this.state.recommendations} handleReturnToResults={this.handleReturnToResults} handleChangeFocus={this.handleChangeFocus} formatDate={this.props.formatDate} />;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state.expandedData); //TODO: remove this\r\n\r\n        return (\r\n            <>\r\n                {this.renderType()}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExpandedResult;","import React from 'react';\r\nimport './styles/SearchResultItem.css';\r\nimport ListGroup from 'react-bootstrap/ListGroup'; //sourced from https://react-bootstrap.netlify.app/components/list-group/\r\nimport Image from 'react-bootstrap/Image'; //sourced from https://react-bootstrap.netlify.app/components/images/\r\n\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\r\nconst PLACEHOLDER_POSTER_URL = 'https://i2.wp.com/www.theatrecr.org/wp-content/uploads/2016/01/poster-placeholder.png?ssl=1'; //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n\r\nclass SearchResultItem extends React.Component {\r\n    //handle expanding a search result item\r\n    handleClick = () => this.props.expandResult(this.props.data);\r\n\r\n    //return formatted String for each media_type\r\n    resultType() {\r\n        const resultType = this.props.data.media_type;\r\n\r\n        if (resultType === 'movie')\r\n            return 'Movie';\r\n        else if (resultType === 'tv')\r\n            return 'TV Show';\r\n        else if (resultType === 'person')\r\n            return 'Person';\r\n    }\r\n\r\n    //build URL to access movie/tv poster or person portrait\r\n    buildPosterUrl() {\r\n        const result = this.props.data;\r\n        const resultType = this.props.data.media_type;\r\n        const resultPosterPath = ((resultType === 'movie' || resultType === 'tv') ? result.poster_path : result.profile_path);\r\n\r\n        //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n        return (resultPosterPath) ? (POSTER_BASE_URL + resultPosterPath) : PLACEHOLDER_POSTER_URL;\r\n    }\r\n\r\n    //build URL for a Person's Popular Contribution based on provided poster_path\r\n    buildContributionPosterUrl(item) {\r\n        const resultType = item.data.media_type;\r\n        const resultPosterPath = ((resultType === 'movie' || resultType === 'tv') ? item.data.poster_path : item.data.profile_path);\r\n\r\n        //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n        return (resultPosterPath) ? (POSTER_BASE_URL + resultPosterPath) : PLACEHOLDER_POSTER_URL;\r\n    }\r\n\r\n    //build contributions array for 'Person' search result item\r\n    buildContributionList(result) {\r\n        let popularContributions = [];\r\n\r\n        result.known_for.forEach((item) => {\r\n            let contributionTitle;\r\n\r\n            if (item.media_type === 'movie')\r\n                contributionTitle = item.title;\r\n            else if (item.media_type === 'tv')\r\n                contributionTitle = item.name;\r\n\r\n            const contribution = {\r\n                title: contributionTitle,\r\n                data: item\r\n            }\r\n            popularContributions = [...popularContributions, contribution];\r\n        });\r\n\r\n        return popularContributions;\r\n    }\r\n\r\n    //build JSX object based on media_type of search result item\r\n    buildJsx() {\r\n        const result = this.props.data;\r\n        const resultType = result.media_type;\r\n\r\n        const resultTitle = (resultType === 'movie') ? result.title : result.name;\r\n\r\n        const resultRelease = (resultType === 'movie' || resultType === 'tv') ? (resultType === 'movie' ? result.release_date : result.first_air_date) : {};\r\n        const formattedReleaseDate = this.props.formatDate(resultRelease);\r\n\r\n        if (resultType === 'movie' || resultType === 'tv') {\r\n            return (\r\n                <>\r\n                    <ListGroup.Item className='w-25'><span className='text-muted'>Title</span><hr /><em>{resultTitle}</em></ListGroup.Item>\r\n                    <ListGroup.Item className='w-25'><span className='text-muted'>Release Date</span><hr />{formattedReleaseDate}</ListGroup.Item>\r\n                    <ListGroup.Item className='w-50'><span className='text-muted'>Overview</span><hr />{result.overview}</ListGroup.Item>\r\n                </>\r\n            );\r\n        }\r\n        else if (resultType === 'person') {\r\n            const popularContributions = this.buildContributionList(result);\r\n            let contributionsJsx;\r\n\r\n            if (popularContributions.length > 0) {\r\n                contributionsJsx = (\r\n                    <ListGroup.Item>\r\n                        <span className='text-muted'>Popular Contributions</span>\r\n                        <hr />\r\n                        <ListGroup horizontal>\r\n                            {popularContributions.map((item, index) =>\r\n                                <ListGroup.Item key={index} className='d-inline-block'>\r\n                                    <div><em>{item.title}</em></div>\r\n                                    <Image className='mx-auto known-for-poster' src={this.buildContributionPosterUrl(item)}></Image>\r\n                                </ListGroup.Item>\r\n                            )}\r\n                        </ListGroup>\r\n                    </ListGroup.Item>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <>\r\n                    <ListGroup.Item className='w-25'><span className='text-muted'>Name</span><hr />{resultTitle}</ListGroup.Item>\r\n                    <ListGroup.Item className='w-25'><span className='text-muted'>Known for</span><hr />{result.known_for_department}</ListGroup.Item>\r\n                    {contributionsJsx}\r\n\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ListGroup horizontal='lg' className='m-1 p-1 list-item mx-auto' onClick={this.handleClick}>\r\n                <ListGroup.Item>{this.resultType()}</ListGroup.Item>\r\n                <ListGroup.Item>\r\n                    <Image className='mx-auto small-poster' src={this.buildPosterUrl()} />\r\n                </ListGroup.Item>\r\n                {this.buildJsx()}\r\n            </ListGroup>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchResultItem;","import React from 'react';\r\nimport './styles/SearchResultsPage.css';\r\nimport Container from 'react-bootstrap/Container'; //sourced from https://react-bootstrap.github.io/layout/grid/\r\nimport Image from 'react-bootstrap/Image'; //sourced from https://react-bootstrap.netlify.app/components/images/\r\nimport ExpandedResult from './ExpandedResult';\r\nimport SearchResultItem from './SearchResultItem';\r\n\r\nclass SearchResultsPage extends React.Component {\r\n    state = {\r\n        isShowingExpandedResult: false,\r\n        expandedResultData: {}\r\n    }\r\n\r\n    //handler function for SearchResultItem onClick. Results in ExpandedResult being displayed\r\n    handleExpandResult = (item) => {\r\n        this.setState({\r\n            isShowingExpandedResult: true,\r\n            expandedResultData: item\r\n        });\r\n    }\r\n\r\n    //handler function for 'Return to Results' button. Results in SearchResultsPage being restored after viewing an ExpandedResult\r\n    handleReturnFromExpandedResult = () => {\r\n        this.setState({\r\n            isShowingExpandedResult: false,\r\n            expandedResultData: {}\r\n        });\r\n\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    //returns a formatted date string based on the ISO Date provided by the API\r\n    formatDate(dateString) {\r\n        const date = new Date(dateString);\r\n        const formattedDateStr = date.toDateString();\r\n        const formattedDateSplit = formattedDateStr.split(' ');\r\n        return `${formattedDateSplit[1]} ${formattedDateSplit[2]}, ${formattedDateSplit[3]}`;\r\n    }\r\n\r\n    //switch between ExpandedResult and list of SearchResultItem components\r\n    buildPageJsx() {\r\n        if (this.state.isShowingExpandedResult)  //create ExpandedResult if that's what we're currently showing\r\n            return <ExpandedResult data={this.state.expandedResultData} handleReturnToResults={this.handleReturnFromExpandedResult} formatDate={this.formatDate} />;\r\n        else { //otherwise, create SearchResultItem list\r\n            return (\r\n                <>\r\n                    {this.props.searchData.map((item, index) =>\r\n                        <SearchResultItem data={item} key={index} expandResult={this.handleExpandResult} formatDate={this.formatDate} />\r\n                    )}\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Container className='results-section m-1 mx-auto' fluid>\r\n                    {this.buildPageJsx()}\r\n                    <div className='footer-text'>This product uses the <a className='tmdb-link' href='https://www.themoviedb.org/documentation/api' rel='noreferrer' target='_blank'>TMDb API</a> but is not endorsed or certified by TMDb.</div>\r\n                    <Image className='attribution-logo pt-2' src='https://www.themoviedb.org/assets/2/v4/logos/v2/blue_short-8e7b30f73a4020692ccca9c88bafe5dcb6f8a62a4c6bc55cd9ba82bb2cd95f6c.svg' />\r\n                </Container>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchResultsPage;","import React from 'react';\r\nimport axios from 'axios';\r\nimport './styles/App.css';\r\nimport NavigationBar from './NavigationBar';\r\nimport HomePage from './HomePage';\r\nimport SearchResultsPage from './SearchResultsPage';\r\n\r\nconst SECRET_API_KEY = '8aaeb5fa2472dd850f957c983d0bb2e1';\r\nconst API_BASE_URL = 'https://api.themoviedb.org/3/';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    isShowingResults: false,\r\n    searchData: {},\r\n    searchBoxInput: ''\r\n  }\r\n\r\n  //handler function for changing input in search box, either on homepage or on the navbar\r\n  handleChangeSearchInput = (input) => {\r\n    this.setState({ searchBoxInput: input });\r\n  }\r\n\r\n  //handler function for \"TV & Movie Searching App\" link on NavigationBar; returns to HomePage\r\n  returnToHomePage = () => {\r\n    this.setState({\r\n      isShowingResults: false,\r\n      searchData: {}\r\n    });\r\n  }\r\n\r\n  //1st AJAX Request: fetch array of search results based on user-provided query string\r\n  searchRequest = async (query) => {\r\n    this.returnToHomePage(); //always return to home page before processing search query to ensure NavigationBar search box behaves as expected\r\n\r\n    if (query !== '') { //make AJAX request only if the query is not empty\r\n      this.setState({ searchBoxInput: '' });\r\n      const searchRequestUrl = API_BASE_URL + 'search/multi?api_key=' + SECRET_API_KEY + '&language=en-US&query=' + query + '&page=1&include_adult=false';\r\n\r\n      try {\r\n        const response = await axios.get(searchRequestUrl);\r\n\r\n        this.setState({\r\n          isShowingResults: true,\r\n          searchData: response.data.results\r\n        });\r\n      }\r\n      catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  }\r\n\r\n  //switch between HomePage and SearchResultsPage Components\r\n  displayPage() {\r\n    if (this.state.isShowingResults)\r\n      return <SearchResultsPage searchData={this.state.searchData} />;\r\n    else\r\n      return <HomePage searchRequest={this.searchRequest} onSearchBoxChange={this.handleChangeSearchInput} inputText={this.state.searchBoxInput} />;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <NavigationBar searchRequest={this.searchRequest} returnToHomePage={this.returnToHomePage} onSearchBoxChange={this.handleChangeSearchInput} inputText={this.state.searchBoxInput} />\r\n        {this.displayPage()}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.min.css'; //sourced from https://react-bootstrap.netlify.app/getting-started/introduction/#css\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}