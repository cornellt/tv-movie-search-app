{"version":3,"sources":["components/SearchBox.js","components/NavigationBar.js","components/HomePage.js","components/expanded_result/PersonCastRole.js","components/expanded_result/Person.js","components/expanded_result/Recommendation.js","components/expanded_result/Movie.js","components/expanded_result/TVShow.js","components/ExpandedResult.js","components/SearchResultItem.js","components/SearchResultsPage.js","components/App.js","index.js"],"names":["SearchBox","handleChange","input","props","onSearchBoxChange","target","value","Form","onSubmit","this","handleSubmit","Control","className","size","htmlSize","type","placeholder","onChange","inputText","React","Component","NavigationBar","event","preventDefault","searchRequest","Navbar","fixed","bg","variant","Brand","onClick","returnToHomePage","Nav","Button","HomePage","Image","src","Container","fluid","href","rel","PersonCastRole","castRoleData","data","posterPath","poster_path","Card","handleChangeFocus","id","Img","Body","Title","character","Text","media_type","title","name","index","SECRET_API_KEY","API_BASE_URL","Person","useState","combinedCredits","setCombinedCredits","a","combinedCreditsRequestUrl","axios","get","response","cast","console","log","useEffect","fetchCombinedCredits","path","bioData","result","biography","birthday","formatDate","deathday","compileBio","Row","Col","lg","profile_path","handleReturnToResults","length","actingRoles","i","item","Footer","CardGroup","map","buildActingRolesList","Recommendation","recommendationData","buildBackdropUrl","backdrop_path","overview","Movie","buildGenreList","genres","genreString","substr","buildHomepageJsx","homepage","buildBudgetJsx","budget","formatCurrency","buildBoxOfficeJsx","revenue","buildNetProfitJsx","net","formattedNet","netStyling","Intl","NumberFormat","style","currency","format","compiledMovieData","primaryInfo","release_date","runtime","Math","floor","compileMovieData","tagline","resultPosterPath","buildPosterUrl","recommendations","buildRecommendationSectionJsx","TVShow","buildSeasonsTable","seasons","seasonArray","forEach","element","season_number","push","Table","striped","bordered","episode_count","number_of_seasons","number_of_episodes","compiledShowData","inProd","in_production","color","first_air_date","last_air_date","overviewData","compileTvShowData","ExpandedResult","state","expandedData","itemToFocus","fetchData","resultType","resultDetailsRequestUrl","setState","results","window","scrollTo","renderType","POSTER_BASE_URL","PLACEHOLDER_POSTER_URL","SearchResultItem","handleClick","expandResult","popularContributions","known_for","contributionTitle","contribution","resultTitle","resultRelease","formattedReleaseDate","ListGroup","Item","contributionsJsx","buildContributionList","horizontal","buildContributionPosterUrl","known_for_department","buildJsx","SearchResultsPage","isShowingExpandedResult","expandedResultData","handleExpandResult","handleReturnFromExpandedResult","dateString","formattedDateSplit","Date","toDateString","split","searchData","buildPageJsx","App","isShowingResults","searchBoxInput","handleChangeSearchInput","query","searchRequestUrl","displayPage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.05111577.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles/SearchBox.css';\r\nimport Form from 'react-bootstrap/Form'; //sourced from https://react-bootstrap.netlify.app/components/forms/\r\n\r\nclass SearchBox extends React.Component {\r\n    //handle input text-box value changing\r\n    handleChange = (input) => {\r\n        this.props.onSearchBoxChange(input.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form onSubmit={this.props.handleSubmit}>\r\n                <Form.Control className='border border-secondary text-center' size={this.props.size} htmlSize='36' type='text' placeholder='Search for a TV show, Movie, or Actor' onChange={this.handleChange} value={this.props.inputText} />\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport './styles/NavigationBar.css';\r\nimport SearchBox from './SearchBox';\r\nimport Nav from 'react-bootstrap/Nav' //sourced from https://react-bootstrap.netlify.app/components/navs/\r\nimport Navbar from 'react-bootstrap/Navbar' //sourced from https://react-bootstrap.netlify.app/components/navbar/\r\nimport Button from 'react-bootstrap/Button'; //sourced from https://react-bootstrap.netlify.app/components/buttons/\r\n\r\nclass NavigationBar extends React.Component {\r\n    //handle Search form submission    \r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.searchRequest(this.props.inputText);\r\n    }\r\n\r\n    //Navbar component sourced from react-bootstrap\r\n    render() {\r\n        return (\r\n            <Navbar fixed='top' bg='dark' variant='dark' className='mb-3'>\r\n                <Navbar.Brand className='home-button' onClick={this.props.returnToHomePage}>TV & Movie Searching App</Navbar.Brand>\r\n                <Nav className='mr-auto'>\r\n                </Nav>\r\n                <SearchBox size='md' handleSubmit={this.handleSubmit} onSearchBoxChange={this.props.onSearchBoxChange} inputText={this.props.inputText} />\r\n                <Button className='mx-2' variant='outline-secondary' onClick={this.handleSubmit}>Search</Button>\r\n            </Navbar >\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavigationBar;","import React from 'react';\r\nimport './styles/HomePage.css';\r\nimport SearchBox from './SearchBox';\r\nimport Container from 'react-bootstrap/Container'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport Image from 'react-bootstrap/Image'; //sourced from https://react-bootstrap.netlify.app/components/images/\r\nimport Button from 'react-bootstrap/Button'; //sourced from https://react-bootstrap.netlify.app/components/buttons/\r\n\r\nconst backgroundImageUrl = 'https://images.unsplash.com/photo-1489599849927-2ee91cede3ba?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1350&q=80'; //background image sourced from unsplash.com\r\n\r\nclass HomePage extends React.Component {\r\n    //handle Search form submission    \r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.searchRequest(this.props.inputText);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Image className='hero-img' src={backgroundImageUrl} />\r\n                <Container fluid>\r\n                    <Container fluid className='w-75 search-area'>\r\n                        <SearchBox size='lg' handleSubmit={this.handleSubmit} onSearchBoxChange={this.props.onSearchBoxChange} inputText={this.props.inputText} />\r\n                        <Button variant='secondary' onClick={this.handleSubmit} className='m-2'>Search</Button>\r\n                    </Container>\r\n                </Container>\r\n                <footer className='footer footer-dark'>\r\n                    <span className='footer-text'>This product uses the <a className='tmdb-link' href='https://www.themoviedb.org/documentation/api' rel='noreferrer' target='_blank'>TMDb API</a> but is not endorsed or certified by TMDb.</span>\r\n                </footer>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomePage;","import React from 'react';\r\nimport Card from 'react-bootstrap/Card'; //sourced from https://react-bootstrap.netlify.app/components/cards/\r\n\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500';\r\nconst PLACEHOLDER_POSTER_URL = 'https://i2.wp.com/www.theatrecr.org/wp-content/uploads/2016/01/poster-placeholder.png?ssl=1'; //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n\r\nfunction PersonCastRole(props) {\r\n    const castRoleData = props.data;\r\n    const posterPath = castRoleData.poster_path;\r\n\r\n    return (\r\n        <Card key={props.index} className='cast-card shadow-sm mx-1 my-1' onClick={() => props.handleChangeFocus(props.data)} id={castRoleData.id}>\r\n            <Card.Img className='cast-poster mt-1 mx-auto' variant=\"top\" src={posterPath ? (POSTER_BASE_URL + posterPath) : PLACEHOLDER_POSTER_URL} />\r\n            <Card.Body>\r\n                <Card.Title>{castRoleData.character}</Card.Title>\r\n                <Card.Text className='text-muted'><span>in </span><br />{castRoleData.media_type === 'movie' ? castRoleData.title : castRoleData.name}</Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default PersonCastRole;","import React, { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport '../styles/expanded_result_styles/Person.css';\r\nimport PersonCastRole from './PersonCastRole';\r\nimport Button from 'react-bootstrap/Button'; //sourced from https://react-bootstrap.netlify.app/components/buttons/\r\nimport Card from 'react-bootstrap/Card'; //sourced from https://react-bootstrap.netlify.app/components/cards/\r\nimport Col from 'react-bootstrap/Col'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport Row from 'react-bootstrap/Row'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport CardGroup from 'react-bootstrap/CardGroup'; //sourced from https://react-bootstrap.netlify.app/components/cards/#card-groups\r\n\r\nconst SECRET_API_KEY = '8aaeb5fa2472dd850f957c983d0bb2e1';\r\nconst API_BASE_URL = 'https://api.themoviedb.org/3/';\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\r\nconst PLACEHOLDER_POSTER_URL = 'https://i2.wp.com/www.theatrecr.org/wp-content/uploads/2016/01/poster-placeholder.png?ssl=1'; //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n// const PLACEHOLDER_BACKDROP_URL = 'https://fakeimg.pl/640x360'; //placeholder sourced from https://fakeimg.pl/640x360\r\n\r\nfunction Person(props) {\r\n    const [combinedCredits, setCombinedCredits] = useState([]);\r\n\r\n    //make AJAX request when component fully loads\r\n    useEffect(() => {\r\n        fetchCombinedCredits(props.data);\r\n    });\r\n\r\n    //build URL to access person's portrait\r\n    function buildPosterUrl(path) {\r\n        return path ? (POSTER_BASE_URL + path) : PLACEHOLDER_POSTER_URL;\r\n    }\r\n\r\n    //3rd AJAX Request: fetch combined TV and Movie credits for Person\r\n    async function fetchCombinedCredits(data) {\r\n        if (data.id) {\r\n            const combinedCreditsRequestUrl = API_BASE_URL + 'person/' + data.id + '/combined_credits?api_key=' + SECRET_API_KEY + '&language=en-US';\r\n\r\n            try {\r\n                const response = await axios.get(combinedCreditsRequestUrl);\r\n\r\n                setCombinedCredits(response.data.cast)\r\n            }\r\n            catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    //build JSX for Popular Roles cards\r\n    function buildActingRolesList() {\r\n        if (combinedCredits.length > 0) {\r\n            let actingRoles = [];\r\n\r\n            for (let i = 0; (i < 100) && (i < combinedCredits.length); i++) {\r\n                const item = combinedCredits[i];\r\n                actingRoles = [...actingRoles, item];\r\n            }\r\n\r\n            return (\r\n                <Card.Footer>\r\n                    <Card.Title className='mx-auto'><h2>Acting Roles</h2></Card.Title>\r\n                    <CardGroup>\r\n                        {actingRoles.map((item, index) =>\r\n                            <PersonCastRole key={index} data={item} handleChangeFocus={props.handleChangeFocus} />\r\n                        )}\r\n                    </CardGroup>\r\n                </Card.Footer>\r\n            );\r\n        }\r\n    }\r\n\r\n    //returns Object containing some compiled Person info including name and biography\r\n    function compileBio(result) {\r\n        const bioData = {\r\n            name: result.name,\r\n            biography: '',\r\n            birthday: ''\r\n        }\r\n\r\n        if (result.biography) {\r\n            bioData.biography =\r\n                (<>\r\n                    <h3>Biography</h3>\r\n                    <hr />\r\n                    <Card.Text>\r\n                        {result.biography}\r\n                    </Card.Text>\r\n                </>)\r\n        }\r\n        if (result.birthday) {\r\n            bioData.birthday = <h4>Born on {props.formatDate(result.birthday)}</h4>;\r\n        }\r\n        if (result.deathday) {\r\n            bioData.deathday = <h4>Died on {props.formatDate(result.deathday)}</h4>;\r\n        }\r\n\r\n        return bioData;\r\n    }\r\n\r\n    const bioData = compileBio(props.data);\r\n\r\n    return (\r\n        <Card className='mx-auto my-3 outer-result-card'>\r\n            <Card className='inner-result-card py-3 px-3'>\r\n                {/* <Button className='mx-auto' variant=\"primary\" onClick={props.handleReturnToResults}>Return to Search Results</Button> */}\r\n                <Row>\r\n                    <Col lg className='my-3 ml-1'>\r\n                        <Card.Title className='mb-0'>\r\n                            <h1 className='display-4'>{bioData.name}</h1>\r\n                            <Card.Img className='my-3 my-2 poster w-75' variant=\"top\" src={buildPosterUrl(props.data.profile_path)} />\r\n                            {bioData.birthday}\r\n                            {bioData.deathday}\r\n                        </Card.Title>\r\n                    </Col>\r\n                    <Col lg className='mx-3'>\r\n                        <Card.Body>\r\n                            {bioData.biography}\r\n                        </Card.Body>\r\n                    </Col>\r\n                </Row>\r\n                <Row className='mx-auto my-2'>\r\n                    <Button variant=\"primary\" onClick={props.handleReturnToResults}>Return to Search Results</Button>\r\n                </Row>\r\n            </Card>\r\n            {buildActingRolesList()}\r\n        </Card>\r\n    );\r\n\r\n}\r\n\r\nexport default Person;","import React from 'react';\r\nimport Card from 'react-bootstrap/Card'; //sourced from https://react-bootstrap.netlify.app/components/cards/\r\n\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500';\r\nconst PLACEHOLDER_POSTER_URL = 'https://fakeimg.pl/640x360'; //placeholder sourced from https://fakeimg.pl/640x360\r\n\r\nclass Recommendation extends React.Component {\r\n    //handler for Recommendation onClick; changes \"focused\" ExpandedResult\r\n    handleChangeFocus = () => this.props.handleChangeFocus(this.props.data);\r\n\r\n    //build URL to access movie/tv \"backdrop\" image\r\n    buildBackdropUrl(path) {\r\n        return path === null ? PLACEHOLDER_POSTER_URL : POSTER_BASE_URL + path;\r\n    }\r\n\r\n    render() {\r\n        const recommendationData = this.props.data;\r\n\r\n        return (\r\n            <>\r\n                <Card key={this.props.index} className='recommendation-card shadow-sm my-1 mx-1' onClick={this.handleChangeFocus}>\r\n                    <Card.Img variant=\"top recommendation-img\" src={this.buildBackdropUrl(recommendationData.backdrop_path)} />\r\n                    <Card.Body>\r\n                        <Card.Title>{recommendationData.media_type === 'tv' ? recommendationData.name : recommendationData.title}</Card.Title>\r\n                        <Card.Text className='text-muted'>{recommendationData.overview}</Card.Text>\r\n                    </Card.Body>\r\n                </Card>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Recommendation;","import React from 'react';\r\nimport Recommendation from './Recommendation';\r\nimport Button from 'react-bootstrap/Button'; //sourced from https://react-bootstrap.netlify.app/components/buttons/\r\nimport Card from 'react-bootstrap/Card'; //sourced from https://react-bootstrap.netlify.app/components/cards/\r\nimport Col from 'react-bootstrap/Col'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport Row from 'react-bootstrap/Row'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport CardGroup from 'react-bootstrap/CardGroup'; //sourced from https://react-bootstrap.netlify.app/components/cards/#card-groups\r\n\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\r\nconst PLACEHOLDER_POSTER_URL = 'https://i2.wp.com/www.theatrecr.org/wp-content/uploads/2016/01/poster-placeholder.png?ssl=1'; //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n\r\nfunction Movie(props) {\r\n    //build URL to access movie/tv poster or person portrait\r\n    function buildPosterUrl() {\r\n        const resultPosterPath = props.data.poster_path;\r\n        return resultPosterPath ? (POSTER_BASE_URL + resultPosterPath) : PLACEHOLDER_POSTER_URL;\r\n    }\r\n\r\n    //Build genre String + JSX for TV Show/Movie\r\n    function buildGenreList(data) {\r\n        if (data.genres && data.genres.length > 0) {\r\n            let genreString = 'Genre(s): '\r\n\r\n            for (const genre of data.genres) {\r\n                genreString += (genre.name + ', ');\r\n            }\r\n\r\n            genreString = genreString.substr(0, genreString.length - 2);\r\n            return <h5>{genreString}</h5>;\r\n        }\r\n    }\r\n\r\n    //if homepage link exists, build and return corresponding JSX object\r\n    function buildHomepageJsx(data) {\r\n        if ((data.homepage !== null) && (data.homepage !== ''))\r\n            return <h5><a href={data.homepage} target='_blank' rel=\"noreferrer\">Link to Homepage</a></h5>;\r\n    }\r\n\r\n    //if recommendations exist, build and return Recommendations Section JSX object\r\n    function buildRecommendationSectionJsx() {\r\n        if (props.recommendations.length > 0) { //only build Recommendation section if recommendations exist\r\n            return (\r\n                <Card.Footer className='mx-1'>\r\n                    <Card.Title className='mx-auto'><h2>You Might Also Be Interested In</h2></Card.Title>\r\n                    <CardGroup>\r\n                        {props.recommendations.map((item, index) =>\r\n                            <Recommendation key={index} index={index} data={item} handleChangeFocus={props.handleChangeFocus} />\r\n                        )}\r\n                    </CardGroup>\r\n                </Card.Footer>\r\n            );\r\n        }\r\n    }\r\n\r\n    //if budget data exists, build and return formatted budget info\r\n    function buildBudgetJsx(result) {\r\n        if (result.budget && result.budget > 0) {\r\n            const budget = formatCurrency(result.budget);\r\n            return <h5>Budget: {budget}</h5>;\r\n        }\r\n    }\r\n\r\n    //if revenue data exists, build and return formatted revenue info\r\n    function buildBoxOfficeJsx(result) {\r\n        if (result.revenue && result.revenue > 0) {\r\n            const revenue = formatCurrency(result.revenue);\r\n            return <h5>Box Office Revenue: {revenue}</h5>;\r\n        }\r\n    }\r\n\r\n    //if both budget and revenue data exist, build and return net profit info with appropriate styling based on positive/negative value\r\n    function buildNetProfitJsx(result) {\r\n        if ((result.revenue && result.revenue > 0) && (result.budget && result.budget > 0)) {\r\n            const net = (result.revenue - result.budget);\r\n            const formattedNet = formatCurrency(net);\r\n            const netStyling = (net >= 0) ? 'net-positive' : 'net-negative';\r\n            return <h5 className={netStyling}>Net Income: {formattedNet}</h5>;\r\n        }\r\n    }\r\n\r\n    //convert plain currency number into formatted string\r\n    //formatting syntax sourced from https://www.samanthaming.com/tidbits/30-how-to-format-currency-in-es6/\r\n    function formatCurrency(value) {\r\n        return new Intl.NumberFormat('en-US',\r\n            { style: 'currency', currency: 'USD' }\r\n        ).format(value);\r\n    }\r\n\r\n    //convert mins to hr:min\r\n    function formatRuntime(runtime) {\r\n        if (runtime && runtime > 59) {\r\n            return `${Math.floor(runtime / 60)} hrs, ${runtime % 60} min`;\r\n        }\r\n\r\n        return `${runtime} min`;\r\n    }\r\n\r\n    //returns Object containing some compiled Movie info/JSX for compileItemJsx() function\r\n    function compileMovieData(result) {\r\n        return {\r\n            title: result.title,\r\n            primaryInfo: (\r\n                <>\r\n                    <h3>Release Date: {props.formatDate(result.release_date)}</h3>\r\n                    {(result.runtime > 0) ? (<h5>Runtime: {formatRuntime(result.runtime)}</h5>) : null}\r\n                    {buildGenreList(result)}\r\n                    {buildHomepageJsx(result)}\r\n                    <hr />\r\n                    <span className='text-right'>\r\n                        {buildBudgetJsx(result)}\r\n                        {buildBoxOfficeJsx(result)}\r\n                        {buildNetProfitJsx(result)}\r\n                    </span>\r\n                    {buildBudgetJsx(result) ? <hr /> : <span />}\r\n                    <h4>Overview</h4>\r\n                </>\r\n            ),\r\n            overview: result.overview\r\n        }\r\n    }\r\n\r\n    const compiledMovieData = compileMovieData(props.data);\r\n\r\n    return (\r\n        <Card className='mx-auto my-3 outer-result-card'>\r\n            <Card className='inner-result-card py-3 px-3'>\r\n                {/* <Button className='mx-auto' variant=\"primary\" onClick={props.handleReturnToResults}>Return to Search Results</Button> */}\r\n                <Row>\r\n                    <Col lg className='mx-2'>\r\n                        <Card.Title className='mb-0 mt-3'>\r\n                            <Card.Text className='text-muted mb-0'>{props.data.tagline}</Card.Text>\r\n                            <Card.Img className='mx-auto my-2 poster w-75' variant=\"top\" src={buildPosterUrl()} />\r\n                        </Card.Title>\r\n                    </Col>\r\n                    <Col lg className='mx-auto'>\r\n                        <Card.Body>\r\n                            <h1 className='display-4'>{compiledMovieData.title}</h1>\r\n                            <h5 className='text-muted'>Movie</h5>\r\n                            <hr />\r\n                            {compiledMovieData.primaryInfo}\r\n                            {compiledMovieData.overview}\r\n                        </Card.Body>\r\n                    </Col>\r\n                </Row>\r\n                <Row className='mx-auto my-2'>\r\n                    <Button variant=\"primary\" onClick={props.handleReturnToResults}>Return to Search Results</Button>\r\n                </Row>\r\n            </Card>\r\n            {buildRecommendationSectionJsx()}\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default Movie;","import React from 'react';\r\nimport Recommendation from './Recommendation';\r\nimport Button from 'react-bootstrap/Button'; //sourced from https://react-bootstrap.netlify.app/components/buttons/\r\nimport Card from 'react-bootstrap/Card'; //sourced from https://react-bootstrap.netlify.app/components/cards/\r\nimport Col from 'react-bootstrap/Col'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport Row from 'react-bootstrap/Row'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport Table from 'react-bootstrap/Table'; //sourced from https://react-bootstrap.netlify.app/components/table/\r\nimport CardGroup from 'react-bootstrap/CardGroup'; //sourced from https://react-bootstrap.netlify.app/components/cards/#card-groups\r\n\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\r\nconst PLACEHOLDER_POSTER_URL = 'https://i2.wp.com/www.theatrecr.org/wp-content/uploads/2016/01/poster-placeholder.png?ssl=1'; //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n\r\nfunction TVShow(props) {\r\n    //build URL to access movie/tv poster or person portrait\r\n    function buildPosterUrl() {\r\n        const resultPosterPath = props.data.poster_path;\r\n        return resultPosterPath ? (POSTER_BASE_URL + resultPosterPath) : PLACEHOLDER_POSTER_URL;\r\n    }\r\n\r\n    //if homepage link exists, build and return corresponding JSX object\r\n    function buildHomepageJsx(result) {\r\n        if ((result.homepage !== null) && (result.homepage !== ''))\r\n            return <h5><a href={result.homepage} target='_blank' rel=\"noreferrer\">Link to Homepage</a></h5>;\r\n    }\r\n\r\n    //if recommendations exist, build and return Recommendations Section JSX object\r\n    function buildRecommendationSectionJsx() {\r\n        if (props.recommendations.length > 0) { //only build Recommendation section if recommendations exist\r\n            return (\r\n                <Card.Footer className='mx-1'>\r\n                    <Card.Title className='mx-auto'><h2>You Might Also Be Interested In</h2></Card.Title>\r\n                    <CardGroup>\r\n                        {props.recommendations.map((item, index) =>\r\n                            <Recommendation key={index} index={index} data={item} handleChangeFocus={props.handleChangeFocus} />\r\n                        )}\r\n                    </CardGroup>\r\n                </Card.Footer>\r\n            );\r\n        }\r\n    }\r\n\r\n    //Build react-bootstrap Table for TV Show seasons info\r\n    function buildSeasonsTable() {\r\n        if (props.data.seasons) {\r\n            const seasonArray = []; //const variables cannot be reassigned BUT are NOT immutable -- we can still mutate the array's properties\r\n\r\n            props.data.seasons.forEach(element => {\r\n                if (element.season_number !== 0) //we ignore the 0th season's data because those are 'extra' episodes\r\n                    seasonArray.push(element); //append season to end of seasonArray\r\n            });\r\n\r\n            return (\r\n                <Table striped bordered size='sm' className='my-3'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Season</th>\r\n                            <th>Episodes</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {seasonArray.map((item, index) =>\r\n                            <tr key={index}>\r\n                                <td>{index + 1}</td>\r\n                                <td>{item.episode_count}</td>\r\n                            </tr>\r\n                        )}\r\n                        <tr>\r\n                            <th>{props.data.number_of_seasons} Seasons</th>\r\n                            <th>{props.data.number_of_episodes} Episodes</th>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            );\r\n        }\r\n    }\r\n\r\n    //Build genre String + JSX for TV Show/Movie\r\n    function buildGenreList(data) {\r\n        if (data.genres && data.genres.length > 0) {\r\n            let genreString = 'Genre(s): '\r\n\r\n            for (const genre of data.genres) {\r\n                genreString += (genre.name + ', ');\r\n            }\r\n\r\n            genreString = genreString.substr(0, genreString.length - 2);\r\n            return <h5>{genreString}</h5>;\r\n        }\r\n    }\r\n\r\n    //returns Object containing some compiled TV Show info/JSX for compileItemJsx() function\r\n    function compileTvShowData(result) {\r\n        const inProd = result.in_production;\r\n        const color = inProd ? 'net-positive' : 'net-negative';\r\n        return {\r\n            title: result.name,\r\n            primaryInfo: (\r\n                <>\r\n                    <h3>First Air Date: {props.formatDate(result.first_air_date)}</h3>\r\n                    {inProd ? <h3>Recent Air Date: {props.formatDate(result.last_air_date)}</h3> : <h3>Final Air Date: {props.formatDate(result.last_air_date)}</h3>}\r\n                    <h4 className={color}>{inProd ? 'Still in production' : 'No longer in production'}</h4>\r\n                    {buildGenreList(result)}\r\n                    <br />\r\n                    {buildHomepageJsx(result)}\r\n                    <hr />\r\n                    <h4>Overview</h4>\r\n                </>\r\n            ),\r\n            overviewData: (\r\n                <>\r\n                    <Card.Text className='w-75 mx-auto'>\r\n                        {result.overview}\r\n                    </Card.Text>\r\n                    {buildSeasonsTable()}\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    const compiledShowData = compileTvShowData(props.data);\r\n\r\n    return (\r\n        <Card className='mx-auto my-3 outer-result-card'>\r\n            <Card className='inner-result-card py-3 px-3'>\r\n                {/* <Button className='mx-auto' variant=\"primary\" onClick={props.handleReturnToResults}>Return to Search Results</Button> */}\r\n                <Row>\r\n                    <Col lg className='mx-2'>\r\n                        <Card.Title className='mb-0 mt-3'>\r\n                            <Card.Text className='text-muted mb-0'>{props.data.tagline}</Card.Text>\r\n                            <Card.Img className='mx-auto my-2 poster w-75' variant=\"top\" src={buildPosterUrl()} />\r\n                        </Card.Title>\r\n                    </Col>\r\n                    <Col lg className='mx-auto'>\r\n                        <Card.Body>\r\n                            <h1 className='display-4'>{compiledShowData.title}</h1>\r\n                            <h5 className='text-muted'>TV Show</h5>\r\n                            <hr />\r\n                            {compiledShowData.primaryInfo}\r\n                            {compiledShowData.overviewData} {/* includes show overview and seasons table*/}\r\n                        </Card.Body>\r\n                    </Col>\r\n                </Row>\r\n                <Row className='mx-auto my-2'>\r\n                    <Button variant=\"primary\" onClick={props.handleReturnToResults}>Return to Search Results</Button>\r\n                </Row>\r\n            </Card>\r\n            {buildRecommendationSectionJsx()}\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default TVShow;","import React from 'react';\r\nimport axios from 'axios';\r\nimport './styles/ExpandedResult.css';\r\nimport Person from './expanded_result/Person';\r\nimport Movie from './expanded_result/Movie';\r\nimport TVShow from './expanded_result/TVShow';\r\nimport Button from 'react-bootstrap/Button'; //sourced from https://react-bootstrap.netlify.app/components/buttons/\r\n\r\nconst SECRET_API_KEY = '8aaeb5fa2472dd850f957c983d0bb2e1';\r\nconst API_BASE_URL = 'https://api.themoviedb.org/3/';\r\n\r\nclass ExpandedResult extends React.Component {\r\n    state = {\r\n        expandedData: {},\r\n        recommendations: []\r\n    }\r\n\r\n    //make AJAX request when component loads\r\n    componentDidMount() { this.fetchData(this.props.data); }\r\n\r\n    //handle changing \"focused\" ExpandedResult item (occurs when a recommendation is clicked on)\r\n    handleChangeFocus = (itemToFocus) => this.fetchData(itemToFocus);\r\n\r\n    //handler for 'Return to Results' button; closes ExpandedResult and restores SearchResultsPage\r\n    handleReturnToResults = () => this.props.handleReturnToResults();\r\n\r\n    //return formatted String for each media_type\r\n    resultType() {\r\n        const resultType = this.state.expandedData.media_type;\r\n\r\n        if (resultType === 'movie')\r\n            return 'Movie';\r\n        else if (resultType === 'tv')\r\n            return 'TV Show';\r\n        else if (resultType === 'person')\r\n            return 'Person';\r\n    }\r\n\r\n    //2nd AJAX Request: fetch full data for \"expanded\" Movie/TV Show/Person + appended recommendations data\r\n    async fetchData(data) {\r\n        const resultDetailsRequestUrl = API_BASE_URL + data.media_type + '/' + data.id + '?api_key=' + SECRET_API_KEY + '&language=en-US&append_to_response=recommendations,credits';\r\n\r\n        try {\r\n            const response = await axios.get(resultDetailsRequestUrl);\r\n\r\n            this.setState({\r\n                expandedData: response.data,\r\n                recommendations: (response.data.recommendations) ? response.data.recommendations.results : [] //recommendations only exist for Movies/TV Shows (so we only update recommendations if the data exists)\r\n            });\r\n\r\n            window.scrollTo(0, 0);\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    renderType() {\r\n        let result = this.state.expandedData;\r\n        console.log(result);\r\n        if (result.birthday) {\r\n            return <Person data={this.state.expandedData} handleReturnToResults={this.handleReturnToResults} handleChangeFocus={this.handleChangeFocus} formatDate={this.props.formatDate} />;\r\n        }\r\n        else if (result.title) {\r\n            return <Movie data={this.state.expandedData} recommendations={this.state.recommendations} handleReturnToResults={this.handleReturnToResults} handleChangeFocus={this.handleChangeFocus} formatDate={this.props.formatDate} />;\r\n        }\r\n        else {\r\n            return <TVShow data={this.state.expandedData} recommendations={this.state.recommendations} handleReturnToResults={this.handleReturnToResults} handleChangeFocus={this.handleChangeFocus} formatDate={this.props.formatDate} />;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state.expandedData); //TODO: remove this\r\n\r\n        return (\r\n            <>\r\n                <Button className='mx-auto' variant=\"primary\" onClick={this.props.handleReturnToResults}>Return to Search Results</Button>\r\n                {this.renderType()}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExpandedResult;","import React from 'react';\r\nimport './styles/SearchResultItem.css';\r\nimport ListGroup from 'react-bootstrap/ListGroup'; //sourced from https://react-bootstrap.netlify.app/components/list-group/\r\nimport Image from 'react-bootstrap/Image'; //sourced from https://react-bootstrap.netlify.app/components/images/\r\n\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\r\nconst PLACEHOLDER_POSTER_URL = 'https://i2.wp.com/www.theatrecr.org/wp-content/uploads/2016/01/poster-placeholder.png?ssl=1'; //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n\r\nclass SearchResultItem extends React.Component {\r\n    //handle expanding a search result item\r\n    handleClick = () => this.props.expandResult(this.props.data);\r\n\r\n    //return formatted String for each media_type\r\n    resultType() {\r\n        const resultType = this.props.data.media_type;\r\n\r\n        if (resultType === 'movie')\r\n            return 'Movie';\r\n        else if (resultType === 'tv')\r\n            return 'TV Show';\r\n        else if (resultType === 'person')\r\n            return 'Person';\r\n    }\r\n\r\n    //build URL to access movie/tv poster or person portrait\r\n    buildPosterUrl() {\r\n        const result = this.props.data;\r\n        const resultType = this.props.data.media_type;\r\n        const resultPosterPath = ((resultType === 'movie' || resultType === 'tv') ? result.poster_path : result.profile_path);\r\n\r\n        //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n        return (resultPosterPath) ? (POSTER_BASE_URL + resultPosterPath) : PLACEHOLDER_POSTER_URL;\r\n    }\r\n\r\n    //build URL for a Person's Popular Contribution based on provided poster_path\r\n    buildContributionPosterUrl(item) {\r\n        const resultType = item.data.media_type;\r\n        const resultPosterPath = ((resultType === 'movie' || resultType === 'tv') ? item.data.poster_path : item.data.profile_path);\r\n\r\n        //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n        return (resultPosterPath) ? (POSTER_BASE_URL + resultPosterPath) : PLACEHOLDER_POSTER_URL;\r\n    }\r\n\r\n    //build contributions array for 'Person' search result item\r\n    buildContributionList(result) {\r\n        let popularContributions = [];\r\n\r\n        result.known_for.forEach((item) => {\r\n            let contributionTitle;\r\n\r\n            if (item.media_type === 'movie')\r\n                contributionTitle = item.title;\r\n            else if (item.media_type === 'tv')\r\n                contributionTitle = item.name;\r\n\r\n            const contribution = {\r\n                title: contributionTitle,\r\n                data: item\r\n            }\r\n            popularContributions = [...popularContributions, contribution];\r\n        });\r\n\r\n        return popularContributions;\r\n    }\r\n\r\n    //build JSX object based on media_type of search result item\r\n    buildJsx() {\r\n        const result = this.props.data;\r\n        const resultType = result.media_type;\r\n\r\n        const resultTitle = (resultType === 'movie') ? result.title : result.name;\r\n\r\n        const resultRelease = (resultType === 'movie' || resultType === 'tv') ? (resultType === 'movie' ? result.release_date : result.first_air_date) : {};\r\n        const formattedReleaseDate = this.props.formatDate(resultRelease);\r\n\r\n        if (resultType === 'movie' || resultType === 'tv') {\r\n            return (\r\n                <>\r\n                    <ListGroup.Item className='w-25'><span className='text-muted'>Title</span><hr /><em>{resultTitle}</em></ListGroup.Item>\r\n                    <ListGroup.Item className='w-25'><span className='text-muted'>Release Date</span><hr />{formattedReleaseDate}</ListGroup.Item>\r\n                    <ListGroup.Item className='w-50'><span className='text-muted'>Overview</span><hr />{result.overview}</ListGroup.Item>\r\n                </>\r\n            );\r\n        }\r\n        else if (resultType === 'person') {\r\n            const popularContributions = this.buildContributionList(result);\r\n            let contributionsJsx;\r\n\r\n            if (popularContributions.length > 0) {\r\n                contributionsJsx = (\r\n                    <ListGroup.Item>\r\n                        <span className='text-muted'>Popular Contributions</span>\r\n                        <hr />\r\n                        <ListGroup horizontal>\r\n                            {popularContributions.map((item, index) =>\r\n                                <ListGroup.Item key={index} className='d-inline-block'>\r\n                                    <div><em>{item.title}</em></div>\r\n                                    <Image className='mx-auto known-for-poster' src={this.buildContributionPosterUrl(item)}></Image>\r\n                                </ListGroup.Item>\r\n                            )}\r\n                        </ListGroup>\r\n                    </ListGroup.Item>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <>\r\n                    <ListGroup.Item className='w-25'><span className='text-muted'>Name</span><hr />{resultTitle}</ListGroup.Item>\r\n                    <ListGroup.Item className='w-25'><span className='text-muted'>Known for</span><hr />{result.known_for_department}</ListGroup.Item>\r\n                    {contributionsJsx}\r\n\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ListGroup horizontal='lg' className='m-1 p-1 list-item mx-auto' onClick={this.handleClick}>\r\n                <ListGroup.Item>{this.resultType()}</ListGroup.Item>\r\n                <ListGroup.Item>\r\n                    <Image className='mx-auto small-poster' src={this.buildPosterUrl()} />\r\n                </ListGroup.Item>\r\n                {this.buildJsx()}\r\n            </ListGroup>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchResultItem;","import React from 'react';\r\nimport './styles/SearchResultsPage.css';\r\nimport Container from 'react-bootstrap/Container'; //sourced from https://react-bootstrap.github.io/layout/grid/\r\nimport Image from 'react-bootstrap/Image'; //sourced from https://react-bootstrap.netlify.app/components/images/\r\nimport ExpandedResult from './ExpandedResult';\r\nimport SearchResultItem from './SearchResultItem';\r\n\r\nclass SearchResultsPage extends React.Component {\r\n    state = {\r\n        isShowingExpandedResult: false,\r\n        expandedResultData: {}\r\n    }\r\n\r\n    //handler function for SearchResultItem onClick. Results in ExpandedResult being displayed\r\n    handleExpandResult = (item) => {\r\n        this.setState({\r\n            isShowingExpandedResult: true,\r\n            expandedResultData: item\r\n        });\r\n    }\r\n\r\n    //handler function for 'Return to Results' button. Results in SearchResultsPage being restored after viewing an ExpandedResult\r\n    handleReturnFromExpandedResult = () => {\r\n        this.setState({\r\n            isShowingExpandedResult: false,\r\n            expandedResultData: {}\r\n        });\r\n\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    //returns a formatted date string based on the ISO Date provided by the API\r\n    formatDate(dateString) {\r\n        const date = new Date(dateString);\r\n        const formattedDateStr = date.toDateString();\r\n        const formattedDateSplit = formattedDateStr.split(' ');\r\n        return `${formattedDateSplit[1]} ${formattedDateSplit[2]}, ${formattedDateSplit[3]}`;\r\n    }\r\n\r\n    //switch between ExpandedResult and list of SearchResultItem components\r\n    buildPageJsx() {\r\n        if (this.state.isShowingExpandedResult)  //create ExpandedResult if that's what we're currently showing\r\n            return <ExpandedResult data={this.state.expandedResultData} handleReturnToResults={this.handleReturnFromExpandedResult} formatDate={this.formatDate} />;\r\n        else { //otherwise, create SearchResultItem list\r\n            return (\r\n                <>\r\n                    {this.props.searchData.map((item, index) =>\r\n                        <SearchResultItem data={item} key={index} expandResult={this.handleExpandResult} formatDate={this.formatDate} />\r\n                    )}\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Container className='results-section m-1 mx-auto' fluid>\r\n                    {this.buildPageJsx()}\r\n                    <div className='footer-text'>This product uses the <a className='tmdb-link' href='https://www.themoviedb.org/documentation/api' rel='noreferrer' target='_blank'>TMDb API</a> but is not endorsed or certified by TMDb.</div>\r\n                    <Image className='attribution-logo pt-2' src='https://www.themoviedb.org/assets/2/v4/logos/v2/blue_short-8e7b30f73a4020692ccca9c88bafe5dcb6f8a62a4c6bc55cd9ba82bb2cd95f6c.svg' />\r\n                </Container>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchResultsPage;","import React from 'react';\r\nimport axios from 'axios';\r\nimport './styles/App.css';\r\nimport NavigationBar from './NavigationBar';\r\nimport HomePage from './HomePage';\r\nimport SearchResultsPage from './SearchResultsPage';\r\n\r\nconst SECRET_API_KEY = '8aaeb5fa2472dd850f957c983d0bb2e1';\r\nconst API_BASE_URL = 'https://api.themoviedb.org/3/';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    isShowingResults: false,\r\n    searchData: {},\r\n    searchBoxInput: ''\r\n  }\r\n\r\n  //handler function for changing input in search box, either on homepage or on the navbar\r\n  handleChangeSearchInput = (input) => {\r\n    this.setState({ searchBoxInput: input });\r\n  }\r\n\r\n  //handler function for \"TV & Movie Searching App\" link on NavigationBar; returns to HomePage\r\n  returnToHomePage = () => {\r\n    this.setState({\r\n      isShowingResults: false,\r\n      searchData: {}\r\n    });\r\n  }\r\n\r\n  //1st AJAX Request: fetch array of search results based on user-provided query string\r\n  searchRequest = async (query) => { //arrow function used because this is a CALLBACK FUNCTION. i.e., it's passed as a prop to a rendered Component and called by that child. This impacts the context of 'this' if we don't use an arrow function.\r\n    this.returnToHomePage(); //always return to home page before processing search query to ensure NavigationBar search box behaves as expected\r\n\r\n    if (query !== '') { //make AJAX request only if the query is not empty\r\n      this.setState({ searchBoxInput: '' });\r\n      const searchRequestUrl = API_BASE_URL + 'search/multi?api_key=' + SECRET_API_KEY + '&language=en-US&query=' + query + '&page=1&include_adult=false';\r\n\r\n      try {\r\n        const response = await axios.get(searchRequestUrl);\r\n\r\n        this.setState({\r\n          isShowingResults: true,\r\n          searchData: response.data.results\r\n        });\r\n      }\r\n      catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  }\r\n\r\n  //switch between HomePage and SearchResultsPage Components\r\n  displayPage() {\r\n    if (this.state.isShowingResults)\r\n      return <SearchResultsPage searchData={this.state.searchData} />;\r\n    else\r\n      return <HomePage searchRequest={this.searchRequest} onSearchBoxChange={this.handleChangeSearchInput} inputText={this.state.searchBoxInput} />;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <NavigationBar searchRequest={this.searchRequest} returnToHomePage={this.returnToHomePage} onSearchBoxChange={this.handleChangeSearchInput} inputText={this.state.searchBoxInput} />\r\n        {this.displayPage()}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.min.css'; //sourced from https://react-bootstrap.netlify.app/getting-started/introduction/#css\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}