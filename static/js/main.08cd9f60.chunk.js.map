{"version":3,"sources":["components/SearchBox.js","components/NavigationBar.js","components/HomePage.js","components/expanded_result/PersonCastRole.js","components/expanded_result/Person.js","components/expanded_result/Recommendation.js","components/expanded_result/Movie.js","components/expanded_result/TVShow.js","components/ExpandedResult.js","components/SearchResultItem.js","components/SearchResultsPage.js","components/App.js","index.js"],"names":["SearchBox","props","Form","onSubmit","handleSubmit","Control","className","size","htmlSize","type","placeholder","onChange","input","onSearchBoxChange","target","value","inputText","NavigationBar","event","preventDefault","searchRequest","Navbar","fixed","bg","variant","Brand","onClick","returnToHomePage","Nav","Button","HomePage","Image","src","Container","fluid","href","rel","PersonCastRole","castRoleData","data","posterPath","poster_path","Card","handleChangeFocus","id","Img","Body","Title","character","Text","media_type","title","name","index","SECRET_API_KEY","API_BASE_URL","Person","useState","combinedCredits","setCombinedCredits","a","combinedCreditsRequestUrl","axios","get","response","cast","console","log","useEffect","fetchCombinedCredits","path","bioData","result","biography","birthday","formatDate","deathday","compileBio","Row","Col","lg","profile_path","handleReturnToResults","length","actingRoles","i","item","Footer","CardGroup","map","buildActingRolesList","Recommendation","backdrop_path","overview","Movie","buildGenreList","genres","genreString","substr","buildHomepageJsx","homepage","buildBudgetJsx","budget","formatCurrency","buildBoxOfficeJsx","revenue","buildNetProfitJsx","net","formattedNet","netStyling","Intl","NumberFormat","style","currency","format","compiledMovieData","primaryInfo","release_date","runtime","Math","floor","compileMovieData","tagline","resultPosterPath","buildPosterUrl","recommendations","buildRecommendationSectionJsx","TVShow","buildSeasonsTable","seasons","seasonArray","forEach","element","season_number","push","Table","striped","bordered","episode_count","number_of_seasons","number_of_episodes","compiledShowData","inProd","in_production","color","first_air_date","last_air_date","overviewData","compileTvShowData","ExpandedResult","expandedData","state","setState","fetchData","itemToFocus","resultDetailsRequestUrl","results","window","scrollTo","renderItem","POSTER_BASE_URL","PLACEHOLDER_POSTER_URL","SearchResultItem","buildContributionPosterUrl","resultType","ListGroup","horizontal","expandResult","Item","resultTitle","resultRelease","formattedReleaseDate","contributionsJsx","popularContributions","known_for","contributionTitle","contribution","buildContributionList","known_for_department","buildJsx","SearchResultsPage","isShowingExpandedResult","expandedResultData","handleExpandResult","handleReturnFromExpandedResult","dateString","formattedDateSplit","Date","toDateString","split","searchData","App","isShowingResults","text","searchInput","setSearchInput","handleChangeSearchInput","query","searchRequestUrl","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08cd9f60.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles/SearchBox.css';\r\nimport Form from 'react-bootstrap/Form'; //sourced from https://react-bootstrap.netlify.app/components/forms/\r\n\r\nexport default function SearchBox(props) {\r\n    //handle input text-box value changing\r\n    const onInputChange = (input) => { props.onSearchBoxChange(input.target.value); }\r\n\r\n    return (\r\n        <Form onSubmit={props.handleSubmit}>\r\n            <Form.Control className='border border-secondary text-center' size={props.size} htmlSize='36' type='text' placeholder='Search for a TV show, Movie, or Actor' onChange={onInputChange} value={props.inputText} />\r\n        </Form>\r\n    );\r\n}","import React from 'react';\r\nimport './styles/NavigationBar.css';\r\nimport SearchBox from './SearchBox';\r\nimport Nav from 'react-bootstrap/Nav' //sourced from https://react-bootstrap.netlify.app/components/navs/\r\nimport Navbar from 'react-bootstrap/Navbar' //sourced from https://react-bootstrap.netlify.app/components/navbar/\r\nimport Button from 'react-bootstrap/Button'; //sourced from https://react-bootstrap.netlify.app/components/buttons/\r\n\r\nexport default function NavigationBar(props) {\r\n    //handle Search form submission    \r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        props.searchRequest(props.inputText);\r\n    }\r\n\r\n    //Navbar component sourced from react-bootstrap\r\n    return (\r\n        <Navbar fixed='top' bg='dark' variant='dark' className='mb-3'>\r\n            <Navbar.Brand className='home-button' onClick={props.returnToHomePage}>Home</Navbar.Brand>\r\n            <Nav className='mr-auto'>\r\n            </Nav>\r\n            <SearchBox size='md' handleSubmit={handleSubmit} onSearchBoxChange={props.onSearchBoxChange} inputText={props.inputText} />\r\n            <Button className='mx-2' variant='outline-secondary' onClick={handleSubmit}>Search</Button>\r\n        </Navbar >\r\n    );\r\n}","import React from 'react';\r\nimport './styles/HomePage.css';\r\nimport SearchBox from './SearchBox';\r\nimport Container from 'react-bootstrap/Container'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport Image from 'react-bootstrap/Image'; //sourced from https://react-bootstrap.netlify.app/components/images/\r\nimport Button from 'react-bootstrap/Button'; //sourced from https://react-bootstrap.netlify.app/components/buttons/\r\n\r\nconst backgroundImageUrl = 'https://images.unsplash.com/photo-1489599849927-2ee91cede3ba?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1350&q=80'; //background image sourced from unsplash.com\r\n\r\nexport default function HomePage(props) {\r\n    //handle Search form submission    \r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        props.searchRequest(props.inputText);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Image className='hero-img' src={backgroundImageUrl} />\r\n            <Container fluid>\r\n                <Container fluid className='w-75 search-area'>\r\n                    <SearchBox size='lg' handleSubmit={handleSubmit} onSearchBoxChange={props.onSearchBoxChange} inputText={props.inputText} />\r\n                    <Button variant='secondary' onClick={handleSubmit} className='m-2'>Search</Button>\r\n                </Container>\r\n            </Container>\r\n            <footer className='footer footer-dark'>\r\n                <span className='footer-text'>This product uses the <a className='tmdb-link' href='https://www.themoviedb.org/documentation/api' rel='noreferrer' target='_blank'>TMDb API</a> but is not endorsed or certified by TMDb.</span>\r\n            </footer>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport Card from 'react-bootstrap/Card'; //sourced from https://react-bootstrap.netlify.app/components/cards/\r\n\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500';\r\nconst PLACEHOLDER_POSTER_URL = 'https://i2.wp.com/www.theatrecr.org/wp-content/uploads/2016/01/poster-placeholder.png?ssl=1'; //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n\r\nexport default function PersonCastRole(props) {\r\n    const castRoleData = props.data;\r\n    const posterPath = castRoleData.poster_path;\r\n\r\n    return (\r\n        <Card key={props.index} className='cast-card shadow-sm mx-1 my-1' onClick={() => props.handleChangeFocus(props.data)} id={castRoleData.id}>\r\n            <Card.Img className='cast-poster mt-1 mx-auto' variant=\"top\" src={posterPath ? (POSTER_BASE_URL + posterPath) : PLACEHOLDER_POSTER_URL} />\r\n            <Card.Body>\r\n                <Card.Title>{castRoleData.character}</Card.Title>\r\n                <Card.Text className='text-muted'><span>in </span><br />{castRoleData.media_type === 'movie' ? castRoleData.title : castRoleData.name}</Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport '../styles/expanded_result_styles/Person.css';\r\nimport PersonCastRole from './PersonCastRole';\r\nimport Button from 'react-bootstrap/Button'; //sourced from https://react-bootstrap.netlify.app/components/buttons/\r\nimport Card from 'react-bootstrap/Card'; //sourced from https://react-bootstrap.netlify.app/components/cards/\r\nimport Col from 'react-bootstrap/Col'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport Row from 'react-bootstrap/Row'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport CardGroup from 'react-bootstrap/CardGroup'; //sourced from https://react-bootstrap.netlify.app/components/cards/#card-groups\r\n\r\nconst SECRET_API_KEY = '8aaeb5fa2472dd850f957c983d0bb2e1';\r\nconst API_BASE_URL = 'https://api.themoviedb.org/3/';\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\r\nconst PLACEHOLDER_POSTER_URL = 'https://i2.wp.com/www.theatrecr.org/wp-content/uploads/2016/01/poster-placeholder.png?ssl=1'; //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n// const PLACEHOLDER_BACKDROP_URL = 'https://fakeimg.pl/640x360'; //placeholder sourced from https://fakeimg.pl/640x360\r\n\r\nexport default function Person(props) {\r\n    const [combinedCredits, setCombinedCredits] = useState([]); //hook used for state\r\n\r\n    //make AJAX request when component fully loads\r\n    useEffect(() => {\r\n        fetchCombinedCredits(props.data);\r\n    });\r\n\r\n    //build URL to access person's portrait\r\n    function buildPosterUrl(path) {\r\n        return path ? (POSTER_BASE_URL + path) : PLACEHOLDER_POSTER_URL;\r\n    }\r\n\r\n    //3rd AJAX Request: fetch combined TV and Movie credits for Person\r\n    async function fetchCombinedCredits(data) {\r\n        if (data.id) {\r\n            const combinedCreditsRequestUrl = API_BASE_URL + 'person/' + data.id + '/combined_credits?api_key=' + SECRET_API_KEY + '&language=en-US';\r\n\r\n            try {\r\n                const response = await axios.get(combinedCreditsRequestUrl);\r\n\r\n                setCombinedCredits(response.data.cast)\r\n            }\r\n            catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    //build JSX for Popular Roles cards\r\n    function buildActingRolesList() {\r\n        if (combinedCredits.length > 0) {\r\n            let actingRoles = [];\r\n\r\n            for (let i = 0; (i < 100) && (i < combinedCredits.length); i++) {\r\n                const item = combinedCredits[i];\r\n                actingRoles = [...actingRoles, item];\r\n            }\r\n\r\n            return (\r\n                <Card.Footer>\r\n                    <Card.Title className='mx-auto'><h2>Acting Roles</h2></Card.Title>\r\n                    <CardGroup>\r\n                        {actingRoles.map((item, index) =>\r\n                            <PersonCastRole key={index} data={item} handleChangeFocus={props.handleChangeFocus} />\r\n                        )}\r\n                    </CardGroup>\r\n                </Card.Footer>\r\n            );\r\n        }\r\n    }\r\n\r\n    //returns Object containing some compiled Person info including name and biography\r\n    function compileBio(result) {\r\n        const bioData = {\r\n            name: result.name,\r\n            biography: '',\r\n            birthday: ''\r\n        }\r\n\r\n        if (result.biography) {\r\n            bioData.biography =\r\n                (<>\r\n                    <h3>Biography</h3>\r\n                    <hr />\r\n                    <Card.Text>\r\n                        {result.biography}\r\n                    </Card.Text>\r\n                </>)\r\n        }\r\n        if (result.birthday) {\r\n            bioData.birthday = <h4>Born on {props.formatDate(result.birthday)}</h4>;\r\n        }\r\n        if (result.deathday) {\r\n            bioData.deathday = <h4>Died on {props.formatDate(result.deathday)}</h4>;\r\n        }\r\n\r\n        return bioData;\r\n    }\r\n\r\n    const bioData = compileBio(props.data);\r\n\r\n    return (\r\n        <Card className='mx-auto my-3 outer-result-card'>\r\n            <Card className='inner-result-card py-3 px-3'>\r\n                {/* <Button className='mx-auto' variant=\"primary\" onClick={props.handleReturnToResults}>Return to Search Results</Button> */}\r\n                <Row>\r\n                    <Col lg className='my-3 ml-1'>\r\n                        <Card.Title className='mb-0'>\r\n                            <h1 className='display-4'>{bioData.name}</h1>\r\n                            <Card.Img className='my-3 my-2 poster w-75' variant=\"top\" src={buildPosterUrl(props.data.profile_path)} />\r\n                            {bioData.birthday}\r\n                            {bioData.deathday}\r\n                        </Card.Title>\r\n                    </Col>\r\n                    <Col lg className='mx-3'>\r\n                        <Card.Body>\r\n                            {bioData.biography}\r\n                        </Card.Body>\r\n                    </Col>\r\n                </Row>\r\n                <Row className='mx-auto my-2'>\r\n                    <Button variant=\"primary\" onClick={props.handleReturnToResults}>Return to Search Results</Button>\r\n                </Row>\r\n            </Card>\r\n            {buildActingRolesList()}\r\n        </Card>\r\n    );\r\n\r\n}","import React from 'react';\r\nimport Card from 'react-bootstrap/Card'; //sourced from https://react-bootstrap.netlify.app/components/cards/\r\n\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500';\r\nconst PLACEHOLDER_BACKDROP_URL = 'https://fakeimg.pl/640x360'; //placeholder sourced from https://fakeimg.pl/640x360\r\n\r\nexport default function Recommendation(props) {\r\n    //handler for Recommendation onClick; changes \"focused\" ExpandedResult\r\n    const handleChangeFocus = () => props.handleChangeFocus(props.data);\r\n\r\n    //build URL to access movie/tv \"backdrop\" image\r\n    function buildBackdropUrl(path) {\r\n        return path === null ? PLACEHOLDER_BACKDROP_URL : POSTER_BASE_URL + path;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card key={props.index} className='recommendation-card shadow-sm my-1 mx-1' onClick={handleChangeFocus}>\r\n                <Card.Img variant=\"top recommendation-img\" src={buildBackdropUrl(props.data.backdrop_path)} />\r\n                <Card.Body>\r\n                    <Card.Title>{props.data.media_type === 'tv' ? props.data.name : props.data.title}</Card.Title>\r\n                    <Card.Text className='text-muted'>{props.data.overview}</Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n        </>\r\n    );\r\n\r\n}","import React from 'react';\r\nimport Recommendation from './Recommendation';\r\nimport Button from 'react-bootstrap/Button'; //sourced from https://react-bootstrap.netlify.app/components/buttons/\r\nimport Card from 'react-bootstrap/Card'; //sourced from https://react-bootstrap.netlify.app/components/cards/\r\nimport Col from 'react-bootstrap/Col'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport Row from 'react-bootstrap/Row'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport CardGroup from 'react-bootstrap/CardGroup'; //sourced from https://react-bootstrap.netlify.app/components/cards/#card-groups\r\n\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\r\nconst PLACEHOLDER_POSTER_URL = 'https://i2.wp.com/www.theatrecr.org/wp-content/uploads/2016/01/poster-placeholder.png?ssl=1'; //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n\r\nexport default function Movie(props) {\r\n    //build URL to access movie/tv poster or person portrait\r\n    function buildPosterUrl() {\r\n        const resultPosterPath = props.data.poster_path;\r\n        return resultPosterPath ? (POSTER_BASE_URL + resultPosterPath) : PLACEHOLDER_POSTER_URL;\r\n    }\r\n\r\n    //Build genre String + JSX for TV Show/Movie\r\n    function buildGenreList(data) {\r\n        if (data.genres && data.genres.length > 0) {\r\n            let genreString = 'Genre(s): '\r\n\r\n            for (const genre of data.genres) {\r\n                genreString += (genre.name + ', ');\r\n            }\r\n\r\n            genreString = genreString.substr(0, genreString.length - 2);\r\n            return <h5>{genreString}</h5>;\r\n        }\r\n    }\r\n\r\n    //if homepage link exists, build and return corresponding JSX object\r\n    function buildHomepageJsx(data) {\r\n        if ((data.homepage !== null) && (data.homepage !== ''))\r\n            return <h5><a href={data.homepage} target='_blank' rel=\"noreferrer\">Link to Homepage</a></h5>;\r\n    }\r\n\r\n    //if recommendations exist, build and return Recommendations Section JSX object\r\n    function buildRecommendationSectionJsx() {\r\n        if (props.recommendations.length > 0) { //only build Recommendation section if recommendations exist\r\n            return (\r\n                <Card.Footer className='mx-1'>\r\n                    <Card.Title className='mx-auto'><h2>You Might Also Be Interested In</h2></Card.Title>\r\n                    <CardGroup>\r\n                        {props.recommendations.map((item, index) =>\r\n                            <Recommendation key={index} index={index} data={item} handleChangeFocus={props.handleChangeFocus} />\r\n                        )}\r\n                    </CardGroup>\r\n                </Card.Footer>\r\n            );\r\n        }\r\n    }\r\n\r\n    //if budget data exists, build and return formatted budget info\r\n    function buildBudgetJsx(result) {\r\n        if (result.budget && result.budget > 0) {\r\n            const budget = formatCurrency(result.budget);\r\n            return <h5>Budget: {budget}</h5>;\r\n        }\r\n    }\r\n\r\n    //if revenue data exists, build and return formatted revenue info\r\n    function buildBoxOfficeJsx(result) {\r\n        if (result.revenue && result.revenue > 0) {\r\n            const revenue = formatCurrency(result.revenue);\r\n            return <h5>Box Office Revenue: {revenue}</h5>;\r\n        }\r\n    }\r\n\r\n    //if both budget and revenue data exist, build and return net profit info with appropriate styling based on positive/negative value\r\n    function buildNetProfitJsx(result) {\r\n        if ((result.revenue && result.revenue > 0) && (result.budget && result.budget > 0)) {\r\n            const net = (result.revenue - result.budget);\r\n            const formattedNet = formatCurrency(net);\r\n            const netStyling = (net >= 0) ? 'net-positive' : 'net-negative';\r\n            return <h5 className={netStyling}>Net Income: {formattedNet}</h5>;\r\n        }\r\n    }\r\n\r\n    //convert plain currency number into formatted string\r\n    //formatting syntax sourced from https://www.samanthaming.com/tidbits/30-how-to-format-currency-in-es6/\r\n    function formatCurrency(value) {\r\n        return new Intl.NumberFormat('en-US',\r\n            { style: 'currency', currency: 'USD' }\r\n        ).format(value);\r\n    }\r\n\r\n    //convert mins to hr:min\r\n    function formatRuntime(runtime) {\r\n        if (runtime && runtime > 59) {\r\n            return `${Math.floor(runtime / 60)} hrs, ${runtime % 60} min`;\r\n        }\r\n\r\n        return `${runtime} min`;\r\n    }\r\n\r\n    //returns Object containing some compiled Movie info/JSX for compileItemJsx() function\r\n    function compileMovieData(result) {\r\n        return {\r\n            title: result.title,\r\n            primaryInfo: (\r\n                <>\r\n                    <h3>Release Date: {props.formatDate(result.release_date)}</h3>\r\n                    {(result.runtime > 0) ? (<h5>Runtime: {formatRuntime(result.runtime)}</h5>) : null}\r\n                    {buildGenreList(result)}\r\n                    {buildHomepageJsx(result)}\r\n                    <hr />\r\n                    <span className='text-right'>\r\n                        {buildBudgetJsx(result)}\r\n                        {buildBoxOfficeJsx(result)}\r\n                        {buildNetProfitJsx(result)}\r\n                    </span>\r\n                    {buildBudgetJsx(result) ? <hr /> : <span />}\r\n                    <h4>Overview</h4>\r\n                </>\r\n            ),\r\n            overview: result.overview\r\n        }\r\n    }\r\n\r\n    const compiledMovieData = compileMovieData(props.data);\r\n\r\n    return (\r\n        <Card className='mx-auto my-3 outer-result-card'>\r\n            <Card className='inner-result-card py-3 px-3'>\r\n                {/* <Button className='mx-auto' variant=\"primary\" onClick={props.handleReturnToResults}>Return to Search Results</Button> */}\r\n                <Row>\r\n                    <Col lg className='mx-2'>\r\n                        <Card.Title className='mb-0 mt-3'>\r\n                            <Card.Text className='text-muted mb-0'>{props.data.tagline}</Card.Text>\r\n                            <Card.Img className='mx-auto my-2 poster w-75' variant=\"top\" src={buildPosterUrl()} />\r\n                        </Card.Title>\r\n                    </Col>\r\n                    <Col lg className='mx-auto'>\r\n                        <Card.Body>\r\n                            <h1 className='display-4'>{compiledMovieData.title}</h1>\r\n                            <h5 className='text-muted'>Movie</h5>\r\n                            <hr />\r\n                            {compiledMovieData.primaryInfo}\r\n                            {compiledMovieData.overview}\r\n                        </Card.Body>\r\n                    </Col>\r\n                </Row>\r\n                <Row className='mx-auto my-2'>\r\n                    <Button variant=\"primary\" onClick={props.handleReturnToResults}>Return to Search Results</Button>\r\n                </Row>\r\n            </Card>\r\n            {buildRecommendationSectionJsx()}\r\n        </Card>\r\n    );\r\n}","import React from 'react';\r\nimport Recommendation from './Recommendation';\r\nimport Button from 'react-bootstrap/Button'; //sourced from https://react-bootstrap.netlify.app/components/buttons/\r\nimport Card from 'react-bootstrap/Card'; //sourced from https://react-bootstrap.netlify.app/components/cards/\r\nimport Col from 'react-bootstrap/Col'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport Row from 'react-bootstrap/Row'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport Table from 'react-bootstrap/Table'; //sourced from https://react-bootstrap.netlify.app/components/table/\r\nimport CardGroup from 'react-bootstrap/CardGroup'; //sourced from https://react-bootstrap.netlify.app/components/cards/#card-groups\r\n\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\r\nconst PLACEHOLDER_POSTER_URL = 'https://i2.wp.com/www.theatrecr.org/wp-content/uploads/2016/01/poster-placeholder.png?ssl=1'; //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n\r\nexport default function TVShow(props) {\r\n    //build URL to access movie/tv poster or person portrait\r\n    function buildPosterUrl() {\r\n        const resultPosterPath = props.data.poster_path;\r\n        return resultPosterPath ? (POSTER_BASE_URL + resultPosterPath) : PLACEHOLDER_POSTER_URL;\r\n    }\r\n\r\n    //if homepage link exists, build and return corresponding JSX object\r\n    function buildHomepageJsx(result) {\r\n        if ((result.homepage !== null) && (result.homepage !== ''))\r\n            return <h5><a href={result.homepage} target='_blank' rel=\"noreferrer\">Link to Homepage</a></h5>;\r\n    }\r\n\r\n    //if recommendations exist, build and return Recommendations Section JSX object\r\n    function buildRecommendationSectionJsx() {\r\n        if (props.recommendations.length > 0) { //only build Recommendation section if recommendations exist\r\n            return (\r\n                <Card.Footer className='mx-1'>\r\n                    <Card.Title className='mx-auto'><h2>You Might Also Be Interested In</h2></Card.Title>\r\n                    <CardGroup>\r\n                        {props.recommendations.map((item, index) =>\r\n                            <Recommendation key={index} index={index} data={item} handleChangeFocus={props.handleChangeFocus} />\r\n                        )}\r\n                    </CardGroup>\r\n                </Card.Footer>\r\n            );\r\n        }\r\n    }\r\n\r\n    //Build react-bootstrap Table for TV Show seasons info\r\n    function buildSeasonsTable() {\r\n        if (props.data.seasons) {\r\n            const seasonArray = []; //const variables cannot be reassigned BUT are NOT immutable -- we can still mutate the array's properties\r\n\r\n            props.data.seasons.forEach(element => {\r\n                if (element.season_number !== 0) //we ignore the 0th season's data because those are 'extra' episodes\r\n                    seasonArray.push(element); //append season to end of seasonArray\r\n            });\r\n\r\n            return (\r\n                <Table striped bordered size='sm' className='my-3'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Season</th>\r\n                            <th>Episodes</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {seasonArray.map((item, index) =>\r\n                            <tr key={index}>\r\n                                <td>{index + 1}</td>\r\n                                <td>{item.episode_count}</td>\r\n                            </tr>\r\n                        )}\r\n                        <tr>\r\n                            <th>{props.data.number_of_seasons} Seasons</th>\r\n                            <th>{props.data.number_of_episodes} Episodes</th>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            );\r\n        }\r\n    }\r\n\r\n    //Build genre String + JSX for TV Show/Movie\r\n    function buildGenreList(data) {\r\n        if (data.genres && data.genres.length > 0) {\r\n            let genreString = 'Genre(s): '\r\n\r\n            for (const genre of data.genres) {\r\n                genreString += (genre.name + ', ');\r\n            }\r\n\r\n            genreString = genreString.substr(0, genreString.length - 2);\r\n            return <h5>{genreString}</h5>;\r\n        }\r\n    }\r\n\r\n    //returns Object containing some compiled TV Show info/JSX for compileItemJsx() function\r\n    function compileTvShowData(result) {\r\n        const inProd = result.in_production;\r\n        const color = inProd ? 'net-positive' : 'net-negative';\r\n        return {\r\n            title: result.name,\r\n            primaryInfo: (\r\n                <>\r\n                    <h3>First Air Date: {props.formatDate(result.first_air_date)}</h3>\r\n                    {inProd ? <h3>Recent Air Date: {props.formatDate(result.last_air_date)}</h3> : <h3>Final Air Date: {props.formatDate(result.last_air_date)}</h3>}\r\n                    <h4 className={color}>{inProd ? 'Still in production' : 'No longer in production'}</h4>\r\n                    {buildGenreList(result)}\r\n                    <br />\r\n                    {buildHomepageJsx(result)}\r\n                    <hr />\r\n                    <h4>Overview</h4>\r\n                </>\r\n            ),\r\n            overviewData: (\r\n                <>\r\n                    <Card.Text className='w-75 mx-auto'>\r\n                        {result.overview}\r\n                    </Card.Text>\r\n                    {buildSeasonsTable()}\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    const compiledShowData = compileTvShowData(props.data);\r\n\r\n    return (\r\n        <Card className='mx-auto my-3 outer-result-card'>\r\n            <Card className='inner-result-card py-3 px-3'>\r\n                {/* <Button className='mx-auto' variant=\"primary\" onClick={props.handleReturnToResults}>Return to Search Results</Button> */}\r\n                <Row>\r\n                    <Col lg className='mx-2'>\r\n                        <Card.Title className='mb-0 mt-3'>\r\n                            <Card.Text className='text-muted mb-0'>{props.data.tagline}</Card.Text>\r\n                            <Card.Img className='mx-auto my-2 poster w-75' variant=\"top\" src={buildPosterUrl()} />\r\n                        </Card.Title>\r\n                    </Col>\r\n                    <Col lg className='mx-auto'>\r\n                        <Card.Body>\r\n                            <h1 className='display-4'>{compiledShowData.title}</h1>\r\n                            <h5 className='text-muted'>TV Show</h5>\r\n                            <hr />\r\n                            {compiledShowData.primaryInfo}\r\n                            {compiledShowData.overviewData} {/* includes show overview and seasons table*/}\r\n                        </Card.Body>\r\n                    </Col>\r\n                </Row>\r\n                <Row className='mx-auto my-2'>\r\n                    <Button variant=\"primary\" onClick={props.handleReturnToResults}>Return to Search Results</Button>\r\n                </Row>\r\n            </Card>\r\n            {buildRecommendationSectionJsx()}\r\n        </Card>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './styles/ExpandedResult.css';\r\nimport Person from './expanded_result/Person';\r\nimport Movie from './expanded_result/Movie';\r\nimport TVShow from './expanded_result/TVShow';\r\nimport Button from 'react-bootstrap/Button'; //sourced from https://react-bootstrap.netlify.app/components/buttons/\r\n\r\nconst SECRET_API_KEY = '8aaeb5fa2472dd850f957c983d0bb2e1';\r\nconst API_BASE_URL = 'https://api.themoviedb.org/3/';\r\n\r\nexport default function ExpandedResult(props) {\r\n    const [state, setState] = useState({\r\n        expandedData: {},\r\n        recommendations: []\r\n    })\r\n\r\n    //make initial AJAX request when component loads\r\n    useEffect(() => {\r\n        fetchData(props.data);\r\n    }, [props.data]);\r\n\r\n    //handle changing \"focused\" ExpandedResult item (occurs when a recommendation is clicked on)\r\n    const handleChangeFocus = (itemToFocus) => fetchData(itemToFocus);\r\n\r\n    //handler for 'Return to Results' button; closes ExpandedResult and restores SearchResultsPage\r\n    const handleReturnToResults = () => props.handleReturnToResults();\r\n\r\n    //2nd AJAX Request: fetch full data for \"expanded\" Movie/TV Show/Person + appended recommendations data\r\n    async function fetchData(data) {\r\n        const resultDetailsRequestUrl = API_BASE_URL + data.media_type + '/' + data.id + '?api_key=' + SECRET_API_KEY + '&language=en-US&append_to_response=recommendations,credits';\r\n\r\n        try {\r\n            const response = await axios.get(resultDetailsRequestUrl);\r\n\r\n            setState({\r\n                expandedData: response.data,\r\n                recommendations: (response.data.recommendations) ? response.data.recommendations.results : [] //recommendations only exist for Movies/TV Shows (so we only update recommendations if the data exists)\r\n            });\r\n\r\n            window.scrollTo(0, 0);\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    function renderItem() {\r\n        let result = state.expandedData;\r\n\r\n        if (result.birthday) {\r\n            return <Person data={state.expandedData} handleReturnToResults={handleReturnToResults} handleChangeFocus={handleChangeFocus} formatDate={props.formatDate} />;\r\n        }\r\n        else if (result.title) {\r\n            return <Movie data={state.expandedData} recommendations={state.recommendations} handleReturnToResults={handleReturnToResults} handleChangeFocus={handleChangeFocus} formatDate={props.formatDate} />;\r\n        }\r\n        else {\r\n            return <TVShow data={state.expandedData} recommendations={state.recommendations} handleReturnToResults={handleReturnToResults} handleChangeFocus={handleChangeFocus} formatDate={props.formatDate} />;\r\n        }\r\n    }\r\n\r\n    //console.log(state.expandedData); //TODO: remove this\r\n\r\n    return (\r\n        <>\r\n            <Button className='mx-auto' variant=\"primary\" onClick={props.handleReturnToResults}>Return to Search Results</Button>\r\n            {renderItem()}\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport './styles/SearchResultItem.css';\r\nimport ListGroup from 'react-bootstrap/ListGroup'; //sourced from https://react-bootstrap.netlify.app/components/list-group/\r\nimport Image from 'react-bootstrap/Image'; //sourced from https://react-bootstrap.netlify.app/components/images/\r\n\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\r\nconst PLACEHOLDER_POSTER_URL = 'https://i2.wp.com/www.theatrecr.org/wp-content/uploads/2016/01/poster-placeholder.png?ssl=1'; //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n\r\nexport default function SearchResultItem(props) {\r\n    //handle expanding a search result item\r\n    const handleClick = () => props.expandResult(props.data);\r\n\r\n    //return formatted String for each media_type\r\n    function resultType() {\r\n        const resultType = props.data.media_type;\r\n\r\n        if (resultType === 'movie')\r\n            return 'Movie';\r\n        else if (resultType === 'tv')\r\n            return 'TV Show';\r\n        else if (resultType === 'person')\r\n            return 'Person';\r\n    }\r\n\r\n    //build URL to access movie/tv poster or person portrait\r\n    function buildPosterUrl() {\r\n        const result = props.data;\r\n        const resultType = props.data.media_type;\r\n        const resultPosterPath = ((resultType === 'movie' || resultType === 'tv') ? result.poster_path : result.profile_path);\r\n\r\n        //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n        return (resultPosterPath) ? (POSTER_BASE_URL + resultPosterPath) : PLACEHOLDER_POSTER_URL;\r\n    }\r\n\r\n    //build URL for a Person's Popular Contribution based on provided poster_path\r\n    function buildContributionPosterUrl(item) {\r\n        const resultType = item.data.media_type;\r\n        const resultPosterPath = ((resultType === 'movie' || resultType === 'tv') ? item.data.poster_path : item.data.profile_path);\r\n\r\n        //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n        return (resultPosterPath) ? (POSTER_BASE_URL + resultPosterPath) : PLACEHOLDER_POSTER_URL;\r\n    }\r\n\r\n    //build contributions array for 'Person' search result item\r\n    function buildContributionList(result) {\r\n        let popularContributions = [];\r\n\r\n        result.known_for.forEach((item) => {\r\n            let contributionTitle;\r\n\r\n            if (item.media_type === 'movie')\r\n                contributionTitle = item.title;\r\n            else if (item.media_type === 'tv')\r\n                contributionTitle = item.name;\r\n\r\n            const contribution = {\r\n                title: contributionTitle,\r\n                data: item\r\n            }\r\n            popularContributions = [...popularContributions, contribution];\r\n        });\r\n\r\n        return popularContributions;\r\n    }\r\n\r\n    //build JSX object based on media_type of search result item\r\n    function buildJsx() {\r\n        const result = props.data;\r\n        const resultType = result.media_type;\r\n\r\n        const resultTitle = (resultType === 'movie') ? result.title : result.name;\r\n\r\n        const resultRelease = (resultType === 'movie' || resultType === 'tv') ? (resultType === 'movie' ? result.release_date : result.first_air_date) : {};\r\n        const formattedReleaseDate = props.formatDate(resultRelease);\r\n\r\n        if (resultType === 'movie' || resultType === 'tv') {\r\n            return (\r\n                <>\r\n                    <ListGroup.Item className='w-25'><span className='text-muted'>Title</span><hr /><em>{resultTitle}</em></ListGroup.Item>\r\n                    <ListGroup.Item className='w-25'><span className='text-muted'>Release Date</span><hr />{formattedReleaseDate}</ListGroup.Item>\r\n                    <ListGroup.Item className='w-50'><span className='text-muted'>Overview</span><hr />{result.overview}</ListGroup.Item>\r\n                </>\r\n            );\r\n        }\r\n        else if (resultType === 'person') {\r\n            const popularContributions = buildContributionList(result);\r\n            let contributionsJsx;\r\n\r\n            if (popularContributions.length > 0) {\r\n                contributionsJsx = (\r\n                    <ListGroup.Item>\r\n                        <span className='text-muted'>Popular Contributions</span>\r\n                        <hr />\r\n                        <ListGroup horizontal>\r\n                            {popularContributions.map((item, index) =>\r\n                                <ListGroup.Item key={index} className='d-inline-block'>\r\n                                    <div><em>{item.title}</em></div>\r\n                                    <Image className='mx-auto known-for-poster' src={buildContributionPosterUrl(item)}></Image>\r\n                                </ListGroup.Item>\r\n                            )}\r\n                        </ListGroup>\r\n                    </ListGroup.Item>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <>\r\n                    <ListGroup.Item className='w-25'><span className='text-muted'>Name</span><hr />{resultTitle}</ListGroup.Item>\r\n                    <ListGroup.Item className='w-25'><span className='text-muted'>Known for</span><hr />{result.known_for_department}</ListGroup.Item>\r\n                    {contributionsJsx}\r\n\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ListGroup horizontal='lg' className='m-1 p-1 list-item mx-auto' onClick={handleClick}>\r\n            <ListGroup.Item>{resultType()}</ListGroup.Item>\r\n            <ListGroup.Item>\r\n                <Image className='mx-auto small-poster' src={buildPosterUrl()} />\r\n            </ListGroup.Item>\r\n            {buildJsx()}\r\n        </ListGroup>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport './styles/SearchResultsPage.css';\r\nimport Container from 'react-bootstrap/Container'; //sourced from https://react-bootstrap.github.io/layout/grid/\r\nimport Image from 'react-bootstrap/Image'; //sourced from https://react-bootstrap.netlify.app/components/images/\r\nimport ExpandedResult from './ExpandedResult';\r\nimport SearchResultItem from './SearchResultItem';\r\n\r\nexport default function SearchResultsPage(props) {\r\n    const [state, setState] = useState({\r\n        isShowingExpandedResult: false,\r\n        expandedResultData: {}\r\n    })\r\n\r\n    //handler function for SearchResultItem onClick. Results in ExpandedResult being displayed\r\n    const handleExpandResult = (item) => {\r\n        setState({\r\n            isShowingExpandedResult: true,\r\n            expandedResultData: item\r\n        });\r\n    }\r\n\r\n    //handler function for 'Return to Results' button. Results in SearchResultsPage being restored after viewing an ExpandedResult\r\n    const handleReturnFromExpandedResult = () => {\r\n        setState({\r\n            isShowingExpandedResult: false,\r\n            expandedResultData: {}\r\n        });\r\n\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    //returns a formatted date string based on the ISO Date provided by the API\r\n    function formatDate(dateString) {\r\n        const date = new Date(dateString);\r\n        const formattedDateStr = date.toDateString();\r\n        const formattedDateSplit = formattedDateStr.split(' ');\r\n        return `${formattedDateSplit[1]} ${formattedDateSplit[2]}, ${formattedDateSplit[3]}`;\r\n    }\r\n\r\n    //switch between ExpandedResult and list of SearchResultItem components\r\n    function buildPageJsx() {\r\n        if (state.isShowingExpandedResult)  //create ExpandedResult if that's what we're currently showing\r\n            return <ExpandedResult data={state.expandedResultData} handleReturnToResults={handleReturnFromExpandedResult} formatDate={formatDate} />;\r\n        else { //otherwise, create SearchResultItem list\r\n            return (\r\n                <>\r\n                    {props.searchData.map((item, index) =>\r\n                        <SearchResultItem data={item} key={index} expandResult={handleExpandResult} formatDate={formatDate} />\r\n                    )}\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container className='results-section m-1 mx-auto' fluid>\r\n                {buildPageJsx()}\r\n                <div className='footer-text'>This product uses the <a className='tmdb-link' href='https://www.themoviedb.org/documentation/api' rel='noreferrer' target='_blank'>TMDb API</a> but is not endorsed or certified by TMDb.</div>\r\n                <Image className='attribution-logo pt-2' src='https://www.themoviedb.org/assets/2/v4/logos/v2/blue_short-8e7b30f73a4020692ccca9c88bafe5dcb6f8a62a4c6bc55cd9ba82bb2cd95f6c.svg' />\r\n            </Container>\r\n        </>\r\n    );\r\n\r\n}","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './styles/App.css';\r\nimport NavigationBar from './NavigationBar';\r\nimport HomePage from './HomePage';\r\nimport SearchResultsPage from './SearchResultsPage';\r\n\r\nconst SECRET_API_KEY = '8aaeb5fa2472dd850f957c983d0bb2e1';\r\nconst API_BASE_URL = 'https://api.themoviedb.org/3/';\r\n\r\nexport default function App() {\r\n  const [state, setState] = useState({\r\n    isShowingResults: false,\r\n    searchData: {}\r\n  });\r\n\r\n  const [searchInput, setSearchInput] = useState({\r\n    text: ''\r\n  })\r\n\r\n  //handler function for changing input in search box, either on homepage or on the navbar\r\n  const handleChangeSearchInput = (input) => {\r\n    setSearchInput({ text: input });\r\n  }\r\n\r\n  //handler function for \"TV & Movie Searching App\" link on NavigationBar; returns to HomePage\r\n  const returnToHomePage = () => {\r\n    setState({\r\n      isShowingResults: false,\r\n      searchData: {}\r\n    });\r\n  }\r\n\r\n  //1st AJAX Request: fetch array of search results based on user-provided query string\r\n  const searchRequest = async (query) => { //arrow function used because this is a CALLBACK FUNCTION. i.e., it's passed as a prop to a rendered Component and called by that child. This impacts the context of 'this' if we don't use an arrow function.\r\n    returnToHomePage(); //always return to home page before processing search query to ensure NavigationBar search box behaves as expected\r\n\r\n    if (query !== '') { //make AJAX request only if the query is not empty\r\n      setSearchInput({ text: '' });\r\n      const searchRequestUrl = API_BASE_URL + 'search/multi?api_key=' + SECRET_API_KEY + '&language=en-US&query=' + query + '&page=1&include_adult=false';\r\n\r\n      try {\r\n        const response = await axios.get(searchRequestUrl);\r\n\r\n        setState({\r\n          isShowingResults: true,\r\n          searchData: response.data.results\r\n        });\r\n      }\r\n      catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  }\r\n\r\n  //switch between HomePage and SearchResultsPage Components\r\n  function displayPage() {\r\n    if (state.isShowingResults)\r\n      return <SearchResultsPage searchData={state.searchData} />;\r\n    else\r\n      return <HomePage searchRequest={searchRequest} onSearchBoxChange={handleChangeSearchInput} inputText={searchInput.text} />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <NavigationBar searchRequest={searchRequest} returnToHomePage={returnToHomePage} onSearchBoxChange={handleChangeSearchInput} inputText={searchInput.text} />\r\n      {displayPage()}\r\n    </>\r\n  );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.min.css'; //sourced from https://react-bootstrap.netlify.app/getting-started/introduction/#css\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}