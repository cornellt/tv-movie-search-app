{"version":3,"sources":["components/NavigationBar.js","components/HomeSearchBox.js","components/HomePage.js","components/Recommendation.js","components/ExpandedResult.js","components/SearchResultItem.js","components/SearchResultsPage.js","components/App.js","index.js"],"names":["NavigationBar","state","text","handleChange","input","setState","target","value","handleSubmit","event","preventDefault","props","searchRequest","Navbar","fixed","bg","variant","className","Brand","onClick","this","returnToHomePage","Nav","Form","inline","onSubmit","FormControl","type","placeholder","htmlSize","onChange","Button","React","Component","HomeSearchBox","Control","size","HomePage","Image","src","Container","fluid","id","Recommendation","handleChangeFocus","item","path","itemName","media_type","name","title","Card","Img","buildBackdropUrl","backdrop_path","Body","Title","Text","overview","index","ExpandedResult","expandedData","recommendations","itemToFocus","fetchData","handleReturnToResults","data","a","resultDetailsRequestUrl","API_BASE_URL","axios","get","response","results","console","log","result","resultType","resultPosterPath","poster_path","profile_path","seasons","seasonArray","forEach","element","season_number","push","Table","striped","bordered","map","episode_count","genres","length","genreString","substr","homepage","href","rel","resultName","resultPrimaryInfo","resultOverview","biography","release_date","runtime","buildGenreList","buildHomepageJsx","first_air_date","last_air_date","in_production","number_of_seasons","number_of_episodes","buildSeasonsTable","Footer","CardColumns","compileMovieData","compileTvShowData","compilePersonData","window","scrollTo","compiledItemJsx","compileItemJsx","Row","Col","lg","tagline","buildPosterUrl","buildRecommendationSectionJsx","POSTER_BASE_URL","PLACEHOLDER_POSTER_URL","SearchResultItem","handleClick","expandResult","popularContributions","known_for","contributionTitle","contribution","resultTitle","resultRelease","ListGroup","Item","buildContributionList","known_for_department","horizontal","buildContributionPosterUrl","buildJsx","SearchResultsPage","isShowingExpandedResult","expandedResultData","handleExpandResult","handleReturnFromExpandedResult","searchData","buildListJsx","SECRET_API_KEY","App","isShowingResults","query","searchRequestUrl","displayPage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fddc76ab.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles/NavigationBar.css';\r\nimport Nav from 'react-bootstrap/Nav' //sourced from https://react-bootstrap.netlify.app/components/navs/\r\nimport Navbar from 'react-bootstrap/Navbar' //sourced from https://react-bootstrap.netlify.app/components/navbar/\r\nimport Button from 'react-bootstrap/Button'; //sourced from https://react-bootstrap.netlify.app/components/buttons/\r\nimport Form from 'react-bootstrap/Form'; //sourced from https://react-bootstrap.netlify.app/components/forms/\r\nimport FormControl from 'react-bootstrap/FormControl' //sourced from https://react-bootstrap.netlify.app/components/forms/\r\n\r\nclass NavigationBar extends React.Component {\r\n    state = {\r\n        text: ''\r\n    }\r\n\r\n    //handle input text-box value changing\r\n    handleChange = (input) => {\r\n        this.setState({\r\n            text: input.target.value\r\n        });\r\n    }\r\n\r\n    //handle Search form submission\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.searchRequest(this.state.text);\r\n    }\r\n\r\n    //Navbar component sourced from react-bootstrap\r\n    render() {\r\n        return (\r\n            <Navbar fixed='top' bg='dark' variant='dark' className='mb-3'>\r\n                <Navbar.Brand className='home-button' onClick={this.props.returnToHomePage}>TV & Movie Searching App</Navbar.Brand>\r\n                <Nav className='mr-auto'>\r\n                </Nav>\r\n                <Form inline onSubmit={this.handleSubmit}>\r\n                    <FormControl type='text' placeholder='Search for a TV show, Movie, or Actor' htmlSize='36' className='mr-sm-1 text-center' onChange={this.handleChange} value={this.state.text} />\r\n                    <Button variant='outline-secondary' onClick={this.handleSubmit}>Search</Button>\r\n                </Form>\r\n            </Navbar >\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavigationBar;","import React from 'react';\r\nimport './styles/HomeSearchBox.css';\r\nimport Button from 'react-bootstrap/Button'; //sourced from https://react-bootstrap.netlify.app/components/buttons/\r\nimport Form from 'react-bootstrap/Form'; //sourced from https://react-bootstrap.netlify.app/components/forms/\r\n\r\nclass HomeSearchBox extends React.Component {\r\n    state = {\r\n        text: ''\r\n    }\r\n\r\n    //handle input text-box value changing\r\n    handleChange = (input) => {\r\n        this.setState({\r\n            text: input.target.value\r\n        });\r\n    }\r\n\r\n    //handle Search form submission    \r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.searchRequest(this.state.text);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form className='search' onSubmit={this.handleSubmit}>\r\n                <Form.Control className='border border-secondary text-center' size='lg' type='text' placeholder='Search for a TV show, Movie, or Actor' onChange={this.handleChange} value={this.state.text} />\r\n                <Button variant='secondary' onClick={this.handleSubmit} className='m-2'>Search</Button>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomeSearchBox;","import React from 'react';\r\nimport './styles/HomePage.css';\r\nimport HomeSearchBox from './HomeSearchBox';\r\nimport Container from 'react-bootstrap/Container'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport Image from 'react-bootstrap/Image' //sourced from https://react-bootstrap.netlify.app/components/images/\r\n\r\nconst HomePage = props => {\r\n    //Background image sourced from unsplash.com\r\n    const backgroundImageUrl = 'https://images.unsplash.com/photo-1489599849927-2ee91cede3ba?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1350&q=80';\r\n\r\n    return (\r\n        <>\r\n            <Image className='hero-img' src={backgroundImageUrl} />\r\n            <Container fluid id='container'>\r\n                <Container fluid className='w-75 search-area'>\r\n                    <HomeSearchBox searchRequest={props.searchRequest} />\r\n                    <p className='powered-by'>Powered by</p>\r\n                    <Image className='powered-by-image' src='https://www.themoviedb.org/assets/2/v4/logos/v2/blue_short-8e7b30f73a4020692ccca9c88bafe5dcb6f8a62a4c6bc55cd9ba82bb2cd95f6c.svg' />\r\n                </Container>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default HomePage;","import React from 'react';\r\nimport Card from 'react-bootstrap/Card'; //sourced from https://react-bootstrap.netlify.app/components/cards/\r\n\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500';\r\n\r\nclass Recommendation extends React.Component {\r\n    //handler for Recommendation onClick; changes \"focused\" ExpandedResult\r\n    handleChangeFocus = () => {\r\n        this.props.handleChangeFocus(this.props.item);\r\n    }\r\n\r\n    //build URL to access movie/tv \"backdrop\" image\r\n    buildBackdropUrl(path) {\r\n        return (path === null) ? 'https://fakeimg.pl/640x360' : (POSTER_BASE_URL + path); //placeholder sourced from https://fakeimg.pl/640x360\r\n    }\r\n\r\n    render() {\r\n        let item = this.props.item;\r\n        let itemName = item.media_type === 'tv' ? item.name : item.title;\r\n\r\n        return (\r\n            <>\r\n                <Card key={this.props.index} className='recommendation-card shadow-sm' onClick={this.handleChangeFocus}>\r\n                    <Card.Img variant=\"top\" src={this.buildBackdropUrl(item.backdrop_path)} />\r\n                    <Card.Body>\r\n                        <Card.Title>{itemName}</Card.Title>\r\n                        <Card.Text>{item.overview}</Card.Text>\r\n                    </Card.Body>\r\n                </Card>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Recommendation;","import React from 'react';\r\nimport axios from 'axios';\r\nimport './styles/ExpandedResult.css';\r\nimport Button from 'react-bootstrap/Button'; //sourced from https://react-bootstrap.netlify.app/components/buttons/\r\nimport Card from 'react-bootstrap/Card'; //sourced from https://react-bootstrap.netlify.app/components/cards/\r\nimport Col from 'react-bootstrap/Col'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport Row from 'react-bootstrap/Row'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport Table from 'react-bootstrap/Table'; //sourced from https://react-bootstrap.netlify.app/components/table/\r\nimport CardColumns from 'react-bootstrap/CardColumns'; //sourced from https://react-bootstrap.netlify.app/components/cards/#card-columns\r\nimport Recommendation from './Recommendation';\r\n\r\nconst SECRET_API_KEY = '8aaeb5fa2472dd850f957c983d0bb2e1';\r\nconst API_BASE_URL = 'https://api.themoviedb.org/3/';\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\r\nconst PLACEHOLDER_POSTER_URL = 'https://i2.wp.com/www.theatrecr.org/wp-content/uploads/2016/01/poster-placeholder.png?ssl=1'; //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n\r\nclass ExpandedResult extends React.Component {\r\n    state = {\r\n        expandedData: {},\r\n        recommendations: []\r\n    }\r\n\r\n    //make AJAX request when component loads\r\n    componentDidMount() { this.fetchData(this.props.data); }\r\n\r\n    //handle changing \"focused\" ExpandedResult item (occurs when a recommendation is clicked on)\r\n    handleChangeFocus = (itemToFocus) => (this.fetchData(itemToFocus));\r\n\r\n    //handler for 'Return to Results' button; closes ExpandedResult and restores SearchResultsPage\r\n    handleReturnToResults = () => (this.props.handleReturnToResults());\r\n\r\n    //2nd AJAX Request: fetch full data for \"expanded\" Movie/TV Show/Person + appended recommendations data\r\n    async fetchData(data) {\r\n        let resultDetailsRequestUrl = API_BASE_URL + data.media_type + '/' + data.id + '?api_key=' + SECRET_API_KEY + '&language=en-US&append_to_response=recommendations';\r\n\r\n        try {\r\n            const response = await axios.get(resultDetailsRequestUrl);\r\n\r\n            this.setState({\r\n                expandedData: response.data,\r\n                recommendations: (response.data.recommendations) ? response.data.recommendations.results : [] //recommendations only exist for Movies/TV Shows (so we only update recommendations if the data exists)\r\n            });\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    //build URL to access movie/tv poster or person portrait\r\n    buildPosterUrl() {\r\n        const result = this.state.expandedData;\r\n        const resultType = this.props.data.media_type;\r\n        const resultPosterPath = ((resultType === 'movie' || resultType === 'tv') ? result.poster_path : result.profile_path);\r\n\r\n        //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n        return (resultPosterPath) ? (POSTER_BASE_URL + resultPosterPath) : PLACEHOLDER_POSTER_URL;\r\n    }\r\n\r\n    //return formatted String for each media_type\r\n    resultType() {\r\n        const resultType = this.props.data.media_type;\r\n\r\n        if (resultType === 'movie')\r\n            return 'Movie';\r\n        else if (resultType === 'tv')\r\n            return 'TV Show';\r\n        else if (resultType === 'person')\r\n            return 'Person';\r\n    }\r\n\r\n    //Build react-bootstrap Table for TV Show seasons info\r\n    buildSeasonsTable() {\r\n        if (this.state.expandedData.seasons) {\r\n            const seasonArray = [];\r\n\r\n            this.state.expandedData.seasons.forEach(element => {\r\n                if (element.season_number !== 0) { //we ignore the 0th season's data because those are 'extra' episodes\r\n                    seasonArray.push(element); //append season to end of seasonArray\r\n                }\r\n            });\r\n\r\n            return (\r\n                <Table striped bordered size='sm' className='my-3'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Season #</th>\r\n                            <th>Episode Count</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {seasonArray.map((item, index) =>\r\n                            <tr key={index}>\r\n                                <td>{index + 1}</td>\r\n                                <td>{item.episode_count}</td>\r\n                            </tr>\r\n                        )}\r\n                    </tbody>\r\n                </Table>\r\n            );\r\n        }\r\n    }\r\n\r\n    //Build genre String + JSX for TV Show/Movie\r\n    buildGenreList(data) {\r\n        if (data.genres && data.genres.length > 0) {\r\n            let genreString = 'Genres: '\r\n\r\n            for (const genre of data.genres) {\r\n                genreString += (genre.name + ', ');\r\n            }\r\n\r\n            genreString = genreString.substr(0, genreString.length - 2);\r\n            return <h5>{genreString}</h5>;\r\n        }\r\n    }\r\n\r\n    //if homepage link exists, build and return corresponding JSX object\r\n    buildHomepageJsx(result) {\r\n        if ((result.homepage !== null) && (result.homepage !== ''))\r\n            return <h5><a href={result.homepage} target='_blank' rel=\"noreferrer\">Link to Homepage</a></h5>;\r\n    }\r\n\r\n    //returns Object containing some compiled Person info/JSX for compileItemJsx() function\r\n    compilePersonData(result) {\r\n        return {\r\n            resultName: result.name,\r\n            resultPrimaryInfo: (\r\n                <>\r\n                    <hr />\r\n                    <h4>Biography</h4>\r\n                </>\r\n            ),\r\n            resultOverview: (\r\n                <>\r\n                    <Card.Text className='w-75 mx-auto'>\r\n                        {result.biography}\r\n                    </Card.Text>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    //returns Object containing some compiled Movie info/JSX for compileItemJsx() function\r\n    compileMovieData(result) {\r\n        return {\r\n            resultName: result.title,\r\n\r\n            resultPrimaryInfo: (\r\n                <>\r\n                    <hr />\r\n                    <h3>Release Date: {result.release_date}</h3>\r\n                    { (result.runtime > 0) ? (<h5>Runtime: {result.runtime} min</h5>) : null}\r\n                    {this.buildGenreList(result)}\r\n                    {this.buildHomepageJsx(result)}\r\n                    <hr />\r\n                    <h4>Overview</h4>\r\n                </>\r\n            ),\r\n            resultOverview: (\r\n                result.overview\r\n            )\r\n        }\r\n    }\r\n\r\n    //returns Object containing some compiled TV Show info/JSX for compileItemJsx() function\r\n    compileTvShowData(result) {\r\n        return {\r\n            resultName: result.name,\r\n            resultPrimaryInfo: (\r\n                <>\r\n                    <hr />\r\n                    <h3>First Air Date: {result.first_air_date}</h3>\r\n                    <h3>Last Air Date: {result.last_air_date}</h3>\r\n                    {result.in_production ? <h4>Still in production</h4> : <h4>No longer in production</h4>}\r\n                    {this.buildGenreList(result)}\r\n                    <br />\r\n                    <h5>Number of Seasons: {result.number_of_seasons}</h5>\r\n                    <h5>Number of Episodes: {result.number_of_episodes}</h5>\r\n                    {this.buildHomepageJsx(result)}\r\n                    <hr />\r\n                    <h4>Overview</h4>\r\n                </>\r\n            ),\r\n            resultOverview: (\r\n                <>\r\n                    <Card.Text className='w-75 mx-auto'>\r\n                        {result.overview}\r\n                    </Card.Text>\r\n                    {this.buildSeasonsTable()}\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    //if recommendations exist, build and return Recommendations Section JSX object\r\n    buildRecommendationSectionJsx() {\r\n        if (this.state.recommendations.length > 0) { //only build Recommendation section if recommendations exist\r\n            return (\r\n                <Card.Footer>\r\n                    <Card.Title className='mx-auto'><h2>Related Recommendations</h2></Card.Title>\r\n                    <CardColumns>\r\n                        {this.state.recommendations.map((item, index) =>\r\n                            <Recommendation key={index} index={index} item={item} handleChangeFocus={this.handleChangeFocus} />\r\n                        )}\r\n                    </CardColumns>\r\n                </Card.Footer>\r\n            );\r\n        }\r\n    }\r\n\r\n    //call appropriate compileData method based on media_type\r\n    compileItemJsx() {\r\n        let resultType = this.props.data.media_type;\r\n\r\n        if (resultType === 'movie')\r\n            return this.compileMovieData(this.state.expandedData);\r\n        else if (resultType === 'tv')\r\n            return this.compileTvShowData(this.state.expandedData);\r\n        else if (resultType === 'person')\r\n            return this.compilePersonData(this.state.expandedData);\r\n    }\r\n\r\n    render() {\r\n        window.scrollTo(0, 0);\r\n        let compiledItemJsx = this.compileItemJsx();\r\n\r\n        return (\r\n            <Card className='mx-auto my-3 outer-result-card'>\r\n                <Card className='inner-result-card'>\r\n                    <Button className='mx-auto' variant=\"primary\" onClick={this.handleReturnToResults}>Return to Search Results</Button>\r\n                    <Row>\r\n                        <Col lg className='mx-2'>\r\n                            <Card.Title className='mb-0 mt-1'>\r\n                                <Card.Text className='text-muted'>{this.state.expandedData.tagline}</Card.Text>\r\n                                <Card.Img className='mx-auto my-2 poster w-75' variant=\"top\" src={this.buildPosterUrl()} />\r\n                            </Card.Title>\r\n                        </Col>\r\n                        <Col lg className='mx-auto'>\r\n                            <Card.Body>\r\n                                <Card.Title>\r\n                                    <h1 className='display-4'>{compiledItemJsx.resultName}</h1>\r\n                                    <h5 className='text-muted'>{this.resultType()}</h5>\r\n                                    {compiledItemJsx.resultPrimaryInfo}\r\n                                </Card.Title>\r\n                                {compiledItemJsx.resultOverview}\r\n                            </Card.Body>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className='mx-auto my-2'>\r\n                        <Button variant=\"primary\" onClick={this.handleReturnToResults}>Return to Search Results</Button>\r\n                    </Row>\r\n                </Card>\r\n                {this.buildRecommendationSectionJsx()}\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExpandedResult;","import React from 'react';\r\nimport './styles/SearchResultItem.css';\r\nimport ListGroup from 'react-bootstrap/ListGroup' //sourced from https://react-bootstrap.netlify.app/components/list-group/\r\nimport Image from 'react-bootstrap/Image' //sourced from https://react-bootstrap.netlify.app/components/images/\r\n\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\r\nconst PLACEHOLDER_POSTER_URL = 'https://i2.wp.com/www.theatrecr.org/wp-content/uploads/2016/01/poster-placeholder.png?ssl=1'; //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n\r\nclass SearchResultItem extends React.Component {\r\n    //handle expanding a search result item\r\n    handleClick = () => {\r\n        this.props.expandResult(this.props.data);\r\n    }\r\n\r\n    //return formatted String for each media_type\r\n    resultType() {\r\n        const resultType = this.props.data.media_type;\r\n\r\n        if (resultType === 'movie')\r\n            return 'Movie';\r\n        else if (resultType === 'tv')\r\n            return 'TV Show';\r\n        else if (resultType === 'person')\r\n            return 'Person';\r\n    }\r\n\r\n    //build contributions array for 'Person' search result item\r\n    buildContributionList(result) {\r\n        let popularContributions = [];\r\n\r\n        result.known_for.forEach((item) => {\r\n            let contributionTitle;\r\n\r\n            if (item.media_type === 'movie')\r\n                contributionTitle = item.title;\r\n            else if (item.media_type === 'tv')\r\n                contributionTitle = item.name;\r\n\r\n            let contribution = {\r\n                title: contributionTitle,\r\n                data: item\r\n            }\r\n            popularContributions = [...popularContributions, contribution];\r\n        });\r\n\r\n        return popularContributions;\r\n    }\r\n\r\n    //build URL to access movie/tv poster or person portrait\r\n    buildPosterUrl() {\r\n        const result = this.props.data;\r\n        const resultType = this.props.data.media_type;\r\n        const resultPosterPath = ((resultType === 'movie' || resultType === 'tv') ? result.poster_path : result.profile_path);\r\n\r\n        //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n        return (resultPosterPath) ? (POSTER_BASE_URL + resultPosterPath) : PLACEHOLDER_POSTER_URL;\r\n    }\r\n\r\n    //build URL for a Person's Popular Contribution based on provided poster_path\r\n    buildContributionPosterUrl(item) {\r\n        const resultType = item.data.media_type;\r\n        const resultPosterPath = ((resultType === 'movie' || resultType === 'tv') ? item.data.poster_path : item.data.profile_path);\r\n\r\n        //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n        return (resultPosterPath) ? (POSTER_BASE_URL + resultPosterPath) : PLACEHOLDER_POSTER_URL;\r\n    }\r\n\r\n    //build JSX object based on media_type of search result item\r\n    buildJsx() {\r\n        const result = this.props.data;\r\n        const resultType = result.media_type;\r\n\r\n        let resultTitle = (resultType === 'movie') ? result.title : result.name;\r\n        let resultRelease = (resultType === 'movie' || resultType === 'tv') ? (resultType === 'movie' ? result.release_date : result.first_air_date) : {};\r\n\r\n        if (resultType === 'movie' || resultType === 'tv') {\r\n            return (\r\n                <>\r\n                    <ListGroup.Item><em>{resultTitle}</em></ListGroup.Item>\r\n                    <ListGroup.Item>{resultRelease}</ListGroup.Item>\r\n                    <ListGroup.Item>{result.overview}</ListGroup.Item>\r\n                </>\r\n            );\r\n        }\r\n        else if (resultType === 'person') {\r\n            let popularContributions = this.buildContributionList(result);\r\n\r\n            return (\r\n                <>\r\n                    <ListGroup.Item>{resultTitle}</ListGroup.Item>\r\n                    <ListGroup.Item>Known for {result.known_for_department}</ListGroup.Item>\r\n                    <ListGroup>\r\n                        <ListGroup.Item><u>Popular Contributions</u></ListGroup.Item>\r\n                        <ListGroup horizontal>\r\n                            {popularContributions.map((item, index) =>\r\n                                <ListGroup.Item key={index} className='d-inline-block'>\r\n                                    <div><em>{item.title}</em></div>\r\n                                    <Image className='mx-auto known-for-poster' src={this.buildContributionPosterUrl(item)}></Image>\r\n                                </ListGroup.Item>\r\n                            )}\r\n                        </ListGroup>\r\n                    </ListGroup>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ListGroup horizontal='md' className='m-1 p-1 list-item mx-auto w-75' onClick={this.handleClick}>\r\n                <ListGroup.Item>{this.resultType()}</ListGroup.Item>\r\n                <ListGroup.Item>\r\n                    <Image className='mx-auto small-poster' src={this.buildPosterUrl()} />\r\n                </ListGroup.Item>\r\n                {this.buildJsx()}\r\n            </ListGroup>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchResultItem;","import React from 'react';\r\nimport './styles/SearchResultsPage.css';\r\nimport Container from 'react-bootstrap/Container'; //sourced from https://react-bootstrap.github.io/layout/grid/\r\nimport Image from 'react-bootstrap/Image'; //sourced from https://react-bootstrap.netlify.app/components/images/\r\nimport ExpandedResult from './ExpandedResult';\r\nimport SearchResultItem from './SearchResultItem';\r\n\r\nclass SearchResultsPage extends React.Component {\r\n    state = {\r\n        isShowingExpandedResult: false,\r\n        expandedResultData: {}\r\n    }\r\n\r\n    //handler function for SearchResultItem onClick. Results in ExpandedResult being displayed\r\n    handleExpandResult = (item) => {\r\n        this.setState({\r\n            isShowingExpandedResult: true,\r\n            expandedResultData: item\r\n        });\r\n    }\r\n\r\n    //handler function for 'Return to Results' button. Results in SearchResultsPage being restored after viewing an ExpandedResult\r\n    handleReturnFromExpandedResult = () => {\r\n        this.setState({\r\n            isShowingExpandedResult: false,\r\n            expandedResultData: {}\r\n        });\r\n    }\r\n\r\n    //build JSX object based on current State\r\n    buildListJsx() {\r\n        if (this.state.isShowingExpandedResult) { //create ExpandedResult if that's what we're currently showing\r\n            return <ExpandedResult data={this.state.expandedResultData} handleReturnToResults={this.handleReturnFromExpandedResult} />;\r\n        }\r\n        else { //create SearchResultItem list otherwise\r\n            return (\r\n                <>\r\n                    {this.props.searchData.map((item, index) =>\r\n                        <SearchResultItem data={item} key={index} expandResult={this.handleExpandResult} />\r\n                    )}\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        window.scrollTo(0, 0);\r\n\r\n        return (\r\n            <>\r\n                <Container className='results-section m-1 mx-auto' fluid>\r\n                    {this.buildListJsx()}\r\n                    <div className='footer-text'>This product uses the TMDb API but is not endorsed or certified by TMDb.</div>\r\n                    <Image className='attribution-logo' src='https://www.themoviedb.org/assets/2/v4/logos/v2/blue_short-8e7b30f73a4020692ccca9c88bafe5dcb6f8a62a4c6bc55cd9ba82bb2cd95f6c.svg' />\r\n                </Container>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchResultsPage;","import React from 'react';\nimport './styles/App.css';\nimport axios from 'axios';\nimport NavigationBar from './NavigationBar'\nimport HomePage from './HomePage';\nimport SearchResultsPage from './SearchResultsPage';\n\nconst SECRET_API_KEY = '8aaeb5fa2472dd850f957c983d0bb2e1';\nconst API_BASE_URL = 'https://api.themoviedb.org/3/';\n\nclass App extends React.Component {\n  state = {\n    isShowingResults: false,\n    searchData: {}\n  }\n\n  //handler function for \"TV & Movie Searching App\" link on NavigationBar; returns to HomePage\n  returnToHomePage = () => {\n    this.setState({\n      isShowingResults: false,\n      searchData: {}\n    });\n  }\n\n  //1st AJAX Request: fetch array of search results based on user-provided query string\n  searchRequest = async (query) => {\n    this.returnToHomePage(); //always return to home page before processing search query to ensure NavigationBar search box behaves as expected\n\n    if (query !== '') { //make AJAX request only if the query is not empty\n      let searchRequestUrl = API_BASE_URL + 'search/multi?api_key=' + SECRET_API_KEY + '&language=en-US&query=' + query + '&page=1&include_adult=false';\n      try {\n        const response = await axios.get(searchRequestUrl);\n\n        this.setState({\n          isShowingResults: true,\n          searchData: response.data.results\n        });\n      }\n      catch (error) {\n        console.log(error);\n      }\n    }\n  }\n\n  //switch between HomePage and SearchResultsPage Components\n  displayPage() {\n    if (this.state.isShowingResults)\n      return <SearchResultsPage searchData={this.state.searchData} />;\n    else\n      return <HomePage searchRequest={this.searchRequest} />;\n  }\n\n  render() {\n    return (\n      <>\n        <NavigationBar searchRequest={this.searchRequest} returnToHomePage={this.returnToHomePage} />\n        {this.displayPage()}\n      </>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './components/styles/index.css';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.min.css'; //sourced from https://react-bootstrap.netlify.app/getting-started/introduction/#css\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}