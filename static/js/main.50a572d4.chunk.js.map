{"version":3,"sources":["components/NavigationBar.js","components/HomeSearchBox.js","components/HomePage.js","components/Recommendation.js","components/ExpandedResult.js","components/SearchResultItem.js","components/SearchResultsPage.js","components/App.js","index.js"],"names":["NavigationBar","state","text","handleChange","input","setState","target","value","handleSubmit","event","preventDefault","props","searchRequest","Navbar","fixed","bg","variant","className","Brand","onClick","this","returnToHomePage","Nav","Form","inline","onSubmit","FormControl","type","placeholder","htmlSize","onChange","Button","React","Component","HomeSearchBox","Control","size","HomePage","Image","src","Container","fluid","id","href","rel","Recommendation","handleChangeFocus","data","path","recommendationData","Card","Img","buildBackdropUrl","backdrop_path","Body","Title","media_type","name","title","Text","overview","index","ExpandedResult","expandedData","recommendations","itemToFocus","fetchData","handleReturnToResults","a","resultDetailsRequestUrl","API_BASE_URL","axios","get","response","results","console","log","result","resultType","resultPosterPath","poster_path","profile_path","Intl","NumberFormat","style","currency","format","runtime","Math","floor","dateString","formattedDateSplit","Date","toDateString","split","budget","formatCurrency","revenue","net","formattedNet","netStyling","resultName","resultPrimaryInfo","resultOverview","biography","formatDate","release_date","formatRuntime","buildGenreList","buildHomepageJsx","buildBudgetJsx","buildBoxOfficeJsx","buildNetProfitJsx","first_air_date","last_air_date","in_production","number_of_seasons","number_of_episodes","buildSeasonsTable","seasons","seasonArray","forEach","element","season_number","push","Table","striped","bordered","map","item","episode_count","genres","length","genreString","substr","homepage","Footer","CardColumns","compileMovieData","compileTvShowData","compilePersonData","window","scrollTo","compiledItemJsx","compileItemJsx","Row","Col","lg","tagline","buildPosterUrl","buildRecommendationSectionJsx","POSTER_BASE_URL","PLACEHOLDER_POSTER_URL","SearchResultItem","handleClick","expandResult","popularContributions","known_for","contributionTitle","contribution","resultTitle","resultRelease","ListGroup","Item","buildContributionList","known_for_department","horizontal","buildContributionPosterUrl","buildJsx","SearchResultsPage","isShowingExpandedResult","expandedResultData","handleExpandResult","handleReturnFromExpandedResult","searchData","buildPageJsx","SECRET_API_KEY","App","isShowingResults","query","searchRequestUrl","displayPage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50a572d4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles/NavigationBar.css';\r\nimport Nav from 'react-bootstrap/Nav' //sourced from https://react-bootstrap.netlify.app/components/navs/\r\nimport Navbar from 'react-bootstrap/Navbar' //sourced from https://react-bootstrap.netlify.app/components/navbar/\r\nimport Button from 'react-bootstrap/Button'; //sourced from https://react-bootstrap.netlify.app/components/buttons/\r\nimport Form from 'react-bootstrap/Form'; //sourced from https://react-bootstrap.netlify.app/components/forms/\r\nimport FormControl from 'react-bootstrap/FormControl' //sourced from https://react-bootstrap.netlify.app/components/forms/\r\n\r\nclass NavigationBar extends React.Component {\r\n    state = {\r\n        text: ''\r\n    }\r\n\r\n    //handle input text-box value changing\r\n    handleChange = (input) => {\r\n        this.setState({\r\n            text: input.target.value\r\n        });\r\n    }\r\n\r\n    //handle Search form submission\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.searchRequest(this.state.text);\r\n        this.setState({\r\n            text: ''\r\n        })\r\n    }\r\n\r\n    //Navbar component sourced from react-bootstrap\r\n    render() {\r\n        return (\r\n            <Navbar fixed='top' bg='dark' variant='dark' className='mb-3'>\r\n                <Navbar.Brand className='home-button' onClick={this.props.returnToHomePage}>TV & Movie Searching App</Navbar.Brand>\r\n                <Nav className='mr-auto'>\r\n                </Nav>\r\n                <Form inline onSubmit={this.handleSubmit}>\r\n                    <FormControl type='text' placeholder='Search for a TV show, Movie, or Actor' htmlSize='36' className='mr-sm-1 text-center' onChange={this.handleChange} value={this.state.text} />\r\n                    <Button variant='outline-secondary' onClick={this.handleSubmit}>Search</Button>\r\n                </Form>\r\n            </Navbar >\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavigationBar;","import React from 'react';\r\nimport './styles/HomeSearchBox.css';\r\nimport Button from 'react-bootstrap/Button'; //sourced from https://react-bootstrap.netlify.app/components/buttons/\r\nimport Form from 'react-bootstrap/Form'; //sourced from https://react-bootstrap.netlify.app/components/forms/\r\n\r\nclass HomeSearchBox extends React.Component {\r\n    state = {\r\n        text: ''\r\n    }\r\n\r\n    //handle input text-box value changing\r\n    handleChange = (input) => {\r\n        this.setState({\r\n            text: input.target.value\r\n        });\r\n    }\r\n\r\n    //handle Search form submission    \r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.searchRequest(this.state.text);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form className='search' onSubmit={this.handleSubmit}>\r\n                <Form.Control className='border border-secondary text-center' size='lg' type='text' placeholder='Search for a TV show, Movie, or Actor' onChange={this.handleChange} value={this.state.text} />\r\n                <Button variant='secondary' onClick={this.handleSubmit} className='m-2'>Search</Button>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomeSearchBox;","import React from 'react';\r\nimport './styles/HomePage.css';\r\nimport HomeSearchBox from './HomeSearchBox';\r\nimport Container from 'react-bootstrap/Container'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport Image from 'react-bootstrap/Image' //sourced from https://react-bootstrap.netlify.app/components/images/\r\n\r\nconst HomePage = props => {\r\n    const backgroundImageUrl = 'https://images.unsplash.com/photo-1489599849927-2ee91cede3ba?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1350&q=80'; //background image sourced from unsplash.com\r\n\r\n    return (\r\n        <>\r\n            <Image className='hero-img' src={backgroundImageUrl} />\r\n            <Container fluid id='container'>\r\n                <Container fluid className='w-75 search-area'>\r\n                    <HomeSearchBox searchRequest={props.searchRequest} />\r\n                </Container>\r\n            </Container>\r\n            <footer className='footer footer-dark mt-auto'>\r\n                <div className='footer-text mt-1'>This product uses the <a className='tmdb-link' href='https://www.themoviedb.org/documentation/api' rel='noreferrer' target='_blank'>TMDb API</a> but is not endorsed or certified by TMDb.</div>\r\n            </footer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default HomePage;","import React from 'react';\r\nimport Card from 'react-bootstrap/Card'; //sourced from https://react-bootstrap.netlify.app/components/cards/\r\n\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500';\r\nconst PLACEHOLDER_POSTER_URL = 'https://fakeimg.pl/640x360'; //placeholder sourced from https://fakeimg.pl/640x360\r\n\r\nclass Recommendation extends React.Component {\r\n    //handler for Recommendation onClick; changes \"focused\" ExpandedResult\r\n    handleChangeFocus = () => this.props.handleChangeFocus(this.props.data);\r\n\r\n    //build URL to access movie/tv \"backdrop\" image\r\n    buildBackdropUrl(path) {\r\n        return path === null ? PLACEHOLDER_POSTER_URL : POSTER_BASE_URL + path;\r\n    }\r\n\r\n    render() {\r\n        const recommendationData = this.props.data;\r\n\r\n        return (\r\n            <>\r\n                <Card key={this.props.index} className='recommendation-card shadow-sm' onClick={this.handleChangeFocus}>\r\n                    <Card.Img variant=\"top\" src={this.buildBackdropUrl(recommendationData.backdrop_path)} />\r\n                    <Card.Body>\r\n                        <Card.Title>{recommendationData.media_type === 'tv' ? recommendationData.name : recommendationData.title}</Card.Title>\r\n                        <Card.Text>{recommendationData.overview}</Card.Text>\r\n                    </Card.Body>\r\n                </Card>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Recommendation;","import React from 'react';\r\nimport axios from 'axios';\r\nimport './styles/ExpandedResult.css';\r\nimport Button from 'react-bootstrap/Button'; //sourced from https://react-bootstrap.netlify.app/components/buttons/\r\nimport Card from 'react-bootstrap/Card'; //sourced from https://react-bootstrap.netlify.app/components/cards/\r\nimport Col from 'react-bootstrap/Col'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport Row from 'react-bootstrap/Row'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport Table from 'react-bootstrap/Table'; //sourced from https://react-bootstrap.netlify.app/components/table/\r\nimport CardColumns from 'react-bootstrap/CardColumns'; //sourced from https://react-bootstrap.netlify.app/components/cards/#card-columns\r\nimport Recommendation from './Recommendation';\r\n\r\nconst SECRET_API_KEY = '8aaeb5fa2472dd850f957c983d0bb2e1';\r\nconst API_BASE_URL = 'https://api.themoviedb.org/3/';\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\r\nconst PLACEHOLDER_POSTER_URL = 'https://i2.wp.com/www.theatrecr.org/wp-content/uploads/2016/01/poster-placeholder.png?ssl=1'; //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n\r\nclass ExpandedResult extends React.Component {\r\n    state = {\r\n        expandedData: {},\r\n        recommendations: []\r\n    }\r\n\r\n    //make AJAX request when component loads\r\n    componentDidMount() { this.fetchData(this.props.data); }\r\n\r\n    //handle changing \"focused\" ExpandedResult item (occurs when a recommendation is clicked on)\r\n    handleChangeFocus = (itemToFocus) => this.fetchData(itemToFocus);\r\n\r\n    //handler for 'Return to Results' button; closes ExpandedResult and restores SearchResultsPage\r\n    handleReturnToResults = () => this.props.handleReturnToResults();\r\n\r\n    //2nd AJAX Request: fetch full data for \"expanded\" Movie/TV Show/Person + appended recommendations data\r\n    async fetchData(data) {\r\n        const resultDetailsRequestUrl = API_BASE_URL + data.media_type + '/' + data.id + '?api_key=' + SECRET_API_KEY + '&language=en-US&append_to_response=recommendations,credits';\r\n\r\n        try {\r\n            const response = await axios.get(resultDetailsRequestUrl);\r\n\r\n            this.setState({\r\n                expandedData: response.data,\r\n                recommendations: (response.data.recommendations) ? response.data.recommendations.results : [] //recommendations only exist for Movies/TV Shows (so we only update recommendations if the data exists)\r\n            });\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    //build URL to access movie/tv poster or person portrait\r\n    buildPosterUrl() {\r\n        const result = this.state.expandedData;\r\n        const resultType = this.props.data.media_type;\r\n        const resultPosterPath = ((resultType === 'movie' || resultType === 'tv') ? result.poster_path : result.profile_path);\r\n\r\n        return resultPosterPath ? (POSTER_BASE_URL + resultPosterPath) : PLACEHOLDER_POSTER_URL;\r\n    }\r\n\r\n    //return formatted String for each media_type\r\n    resultType() {\r\n        const resultType = this.props.data.media_type;\r\n\r\n        if (resultType === 'movie')\r\n            return 'Movie';\r\n        else if (resultType === 'tv')\r\n            return 'TV Show';\r\n        else if (resultType === 'person')\r\n            return 'Person';\r\n    }\r\n\r\n    //convert plain currency number into formatted string\r\n    //formatting syntax sourced from https://www.samanthaming.com/tidbits/30-how-to-format-currency-in-es6/\r\n    formatCurrency(value) {\r\n        return new Intl.NumberFormat('en-US',\r\n            { style: 'currency', currency: 'USD' }\r\n        ).format(value);\r\n    }\r\n\r\n    //convert mins to hr:min\r\n    formatRuntime(runtime) {\r\n        if (runtime && runtime > 59) {\r\n            return `${Math.floor(runtime / 60)} hrs, ${runtime % 60} min`;\r\n        }\r\n\r\n        return `${runtime} min`;\r\n    }\r\n\r\n    //returns a formatted date string based on the ISO Date provided by the API\r\n    formatDate(dateString) {\r\n        const date = new Date(dateString);\r\n        const formattedDateStr = date.toDateString();\r\n        const formattedDateSplit = formattedDateStr.split(' ');\r\n        return `${formattedDateSplit[2]} ${formattedDateSplit[1]} ${formattedDateSplit[3]}`;\r\n    }\r\n\r\n    //if budget data exists, build and return formatted budget info\r\n    buildBudgetJsx(result) {\r\n        if (result.budget && result.budget > 0) {\r\n            const budget = this.formatCurrency(result.budget);\r\n            return <h5>Budget: {budget}</h5>;\r\n        }\r\n    }\r\n\r\n    //if revenue data exists, build and return formatted revenue info\r\n    buildBoxOfficeJsx(result) {\r\n        if (result.revenue && result.revenue > 0) {\r\n            const revenue = this.formatCurrency(result.revenue);\r\n            return <h5>Box Office Revenue: {revenue}</h5>;\r\n        }\r\n    }\r\n\r\n    //if both budget and revenue data exist, build and return net profit info with appropriate styling based on positive/negative value\r\n    buildNetProfitJsx(result) {\r\n        if ((result.revenue && result.revenue > 0) && (result.budget && result.budget > 0)) {\r\n            const net = (result.revenue - result.budget);\r\n            const formattedNet = this.formatCurrency(net);\r\n            const netStyling = (net >= 0) ? 'net-positive' : 'net-negative';\r\n            return <h5 className={netStyling}>Net Income: {formattedNet}</h5>;\r\n        }\r\n    }\r\n\r\n    //returns Object containing some compiled Person info/JSX for compileItemJsx() function\r\n    compilePersonData(result) {\r\n        return {\r\n            resultName: result.name,\r\n            resultPrimaryInfo: <h4>Biography</h4>,\r\n            resultOverview: <Card.Text className='w-75 mx-auto'>{result.biography}</Card.Text>\r\n        }\r\n    }\r\n\r\n    //returns Object containing some compiled Movie info/JSX for compileItemJsx() function\r\n    compileMovieData(result) {\r\n        return {\r\n            resultName: result.title,\r\n            resultPrimaryInfo: (\r\n                <>\r\n                    <h3>Release Date: {this.formatDate(result.release_date)}</h3>\r\n                    { (result.runtime > 0) ? (<h5>Runtime: {this.formatRuntime(result.runtime)}</h5>) : null}\r\n                    {this.buildGenreList(result)}\r\n                    {this.buildHomepageJsx(result)}\r\n                    <hr />\r\n                    <span className='text-right'>\r\n                        {this.buildBudgetJsx(result)}\r\n                        {this.buildBoxOfficeJsx(result)}\r\n                        {this.buildNetProfitJsx(result)}\r\n                    </span>\r\n                    <hr />\r\n                    <h4>Overview</h4>\r\n                </>\r\n            ),\r\n            resultOverview: result.overview\r\n        }\r\n    }\r\n\r\n    //returns Object containing some compiled TV Show info/JSX for compileItemJsx() function\r\n    compileTvShowData(result) {\r\n        return {\r\n            resultName: result.name,\r\n            resultPrimaryInfo: (\r\n                <>\r\n                    <h3>First Air Date: {this.formatDate(result.first_air_date)}</h3>\r\n                    <h3>Last Air Date: {this.formatDate(result.last_air_date)}</h3>\r\n                    <h4>{result.in_production ? 'Still in production' : 'No longer in production'}</h4>\r\n                    {this.buildGenreList(result)}\r\n                    <br />\r\n                    <h5>Number of Seasons: {result.number_of_seasons}</h5>\r\n                    <h5>Number of Episodes: {result.number_of_episodes}</h5>\r\n                    {this.buildHomepageJsx(result)}\r\n                    <hr />\r\n                    <h4>Overview</h4>\r\n                </>\r\n            ),\r\n            resultOverview: (\r\n                <>\r\n                    <Card.Text className='w-75 mx-auto'>\r\n                        {result.overview}\r\n                    </Card.Text>\r\n                    {this.buildSeasonsTable()}\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    //Build react-bootstrap Table for TV Show seasons info\r\n    buildSeasonsTable() {\r\n        if (this.state.expandedData.seasons) {\r\n            const seasonArray = []; //const variables cannot be reassigned BUT are NOT immutable -- we can still mutate the array's properties\r\n\r\n            this.state.expandedData.seasons.forEach(element => {\r\n                if (element.season_number !== 0) //we ignore the 0th season's data because those are 'extra' episodes\r\n                    seasonArray.push(element); //append season to end of seasonArray\r\n            });\r\n\r\n            return (\r\n                <Table striped bordered size='sm' className='my-3'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Season #</th>\r\n                            <th>Episode Count</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {seasonArray.map((item, index) =>\r\n                            <tr key={index}>\r\n                                <td>{index + 1}</td>\r\n                                <td>{item.episode_count}</td>\r\n                            </tr>\r\n                        )}\r\n                    </tbody>\r\n                </Table>\r\n            );\r\n        }\r\n    }\r\n\r\n    //Build genre String + JSX for TV Show/Movie\r\n    buildGenreList(data) {\r\n        if (data.genres && data.genres.length > 0) {\r\n            let genreString = 'Genre(s): '\r\n\r\n            for (const genre of data.genres) {\r\n                genreString += (genre.name + ', ');\r\n            }\r\n\r\n            genreString = genreString.substr(0, genreString.length - 2);\r\n            return <h5>{genreString}</h5>;\r\n        }\r\n    }\r\n\r\n    //if homepage link exists, build and return corresponding JSX object\r\n    buildHomepageJsx(result) {\r\n        if ((result.homepage !== null) && (result.homepage !== ''))\r\n            return <h5><a href={result.homepage} target='_blank' rel=\"noreferrer\">Link to Homepage</a></h5>;\r\n    }\r\n\r\n    //if recommendations exist, build and return Recommendations Section JSX object\r\n    buildRecommendationSectionJsx() {\r\n        if (this.state.recommendations.length > 0) { //only build Recommendation section if recommendations exist\r\n            return (\r\n                <Card.Footer>\r\n                    <Card.Title className='mx-auto'><h2>You Might Also Be Interested In</h2></Card.Title>\r\n                    <CardColumns>\r\n                        {this.state.recommendations.map((item, index) =>\r\n                            <Recommendation key={index} index={index} data={item} handleChangeFocus={this.handleChangeFocus} />\r\n                        )}\r\n                    </CardColumns>\r\n                </Card.Footer>\r\n            );\r\n        }\r\n    }\r\n\r\n    //call appropriate compileData method based on media_type\r\n    compileItemJsx() {\r\n        const resultType = this.props.data.media_type;\r\n\r\n        if (resultType === 'movie')\r\n            return this.compileMovieData(this.state.expandedData);\r\n        else if (resultType === 'tv')\r\n            return this.compileTvShowData(this.state.expandedData);\r\n        else if (resultType === 'person')\r\n            return this.compilePersonData(this.state.expandedData);\r\n    }\r\n\r\n    render() {\r\n        window.scrollTo(0, 0);\r\n        const compiledItemJsx = this.compileItemJsx();\r\n\r\n        //console.log(this.state.expandedData);\r\n\r\n        return (\r\n            <Card className='mx-auto my-3 outer-result-card'>\r\n                <Card className='inner-result-card'>\r\n                    <Button className='mx-auto' variant=\"primary\" onClick={this.handleReturnToResults}>Return to Search Results</Button>\r\n                    <Row>\r\n                        <Col lg className='mx-2'>\r\n                            <Card.Title className='mb-0 mt-1'>\r\n                                <Card.Text className='text-muted'>{this.state.expandedData.tagline}</Card.Text>\r\n                                <Card.Img className='mx-auto my-2 poster w-75' variant=\"top\" src={this.buildPosterUrl()} />\r\n                            </Card.Title>\r\n                        </Col>\r\n                        <Col lg className='mx-auto'>\r\n                            <Card.Body>\r\n                                <Card.Title>\r\n                                    <h1 className='display-4'>{compiledItemJsx.resultName}</h1>\r\n                                    <h5 className='text-muted'>{this.resultType()}</h5>\r\n                                    <hr />\r\n                                    {compiledItemJsx.resultPrimaryInfo}\r\n                                </Card.Title>\r\n                                {compiledItemJsx.resultOverview}\r\n                            </Card.Body>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className='mx-auto my-2'>\r\n                        <Button variant=\"primary\" onClick={this.handleReturnToResults}>Return to Search Results</Button>\r\n                    </Row>\r\n                </Card>\r\n                {this.buildRecommendationSectionJsx()}\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExpandedResult;","import React from 'react';\r\nimport './styles/SearchResultItem.css';\r\nimport ListGroup from 'react-bootstrap/ListGroup' //sourced from https://react-bootstrap.netlify.app/components/list-group/\r\nimport Image from 'react-bootstrap/Image' //sourced from https://react-bootstrap.netlify.app/components/images/\r\n\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\r\nconst PLACEHOLDER_POSTER_URL = 'https://i2.wp.com/www.theatrecr.org/wp-content/uploads/2016/01/poster-placeholder.png?ssl=1'; //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n\r\nclass SearchResultItem extends React.Component {\r\n    //handle expanding a search result item\r\n    handleClick = () => {\r\n        this.props.expandResult(this.props.data);\r\n    }\r\n\r\n    //return formatted String for each media_type\r\n    resultType() {\r\n        const resultType = this.props.data.media_type;\r\n\r\n        if (resultType === 'movie')\r\n            return 'Movie';\r\n        else if (resultType === 'tv')\r\n            return 'TV Show';\r\n        else if (resultType === 'person')\r\n            return 'Person';\r\n    }\r\n\r\n    //build contributions array for 'Person' search result item\r\n    buildContributionList(result) {\r\n        let popularContributions = [];\r\n\r\n        result.known_for.forEach((item) => {\r\n            let contributionTitle;\r\n\r\n            if (item.media_type === 'movie')\r\n                contributionTitle = item.title;\r\n            else if (item.media_type === 'tv')\r\n                contributionTitle = item.name;\r\n\r\n            let contribution = {\r\n                title: contributionTitle,\r\n                data: item\r\n            }\r\n            popularContributions = [...popularContributions, contribution];\r\n        });\r\n\r\n        return popularContributions;\r\n    }\r\n\r\n    //build URL to access movie/tv poster or person portrait\r\n    buildPosterUrl() {\r\n        const result = this.props.data;\r\n        const resultType = this.props.data.media_type;\r\n        const resultPosterPath = ((resultType === 'movie' || resultType === 'tv') ? result.poster_path : result.profile_path);\r\n\r\n        //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n        return (resultPosterPath) ? (POSTER_BASE_URL + resultPosterPath) : PLACEHOLDER_POSTER_URL;\r\n    }\r\n\r\n    //build URL for a Person's Popular Contribution based on provided poster_path\r\n    buildContributionPosterUrl(item) {\r\n        const resultType = item.data.media_type;\r\n        const resultPosterPath = ((resultType === 'movie' || resultType === 'tv') ? item.data.poster_path : item.data.profile_path);\r\n\r\n        //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n        return (resultPosterPath) ? (POSTER_BASE_URL + resultPosterPath) : PLACEHOLDER_POSTER_URL;\r\n    }\r\n\r\n    //build JSX object based on media_type of search result item\r\n    buildJsx() {\r\n        const result = this.props.data;\r\n        const resultType = result.media_type;\r\n\r\n        let resultTitle = (resultType === 'movie') ? result.title : result.name;\r\n        let resultRelease = (resultType === 'movie' || resultType === 'tv') ? (resultType === 'movie' ? result.release_date : result.first_air_date) : {};\r\n\r\n        if (resultType === 'movie' || resultType === 'tv') {\r\n            return (\r\n                <>\r\n                    <ListGroup.Item><em>{resultTitle}</em></ListGroup.Item>\r\n                    <ListGroup.Item>{resultRelease}</ListGroup.Item>\r\n                    <ListGroup.Item>{result.overview}</ListGroup.Item>\r\n                </>\r\n            );\r\n        }\r\n        else if (resultType === 'person') {\r\n            let popularContributions = this.buildContributionList(result);\r\n\r\n            return (\r\n                <>\r\n                    <ListGroup.Item>{resultTitle}</ListGroup.Item>\r\n                    <ListGroup.Item>Known for {result.known_for_department}</ListGroup.Item>\r\n                    <ListGroup>\r\n                        <ListGroup.Item><u>Popular Contributions</u></ListGroup.Item>\r\n                        <ListGroup horizontal>\r\n                            {popularContributions.map((item, index) =>\r\n                                <ListGroup.Item key={index} className='d-inline-block'>\r\n                                    <div><em>{item.title}</em></div>\r\n                                    <Image className='mx-auto known-for-poster' src={this.buildContributionPosterUrl(item)}></Image>\r\n                                </ListGroup.Item>\r\n                            )}\r\n                        </ListGroup>\r\n                    </ListGroup>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ListGroup horizontal='md' className='m-1 p-1 list-item mx-auto' onClick={this.handleClick}>\r\n                <ListGroup.Item>{this.resultType()}</ListGroup.Item>\r\n                <ListGroup.Item>\r\n                    <Image className='mx-auto small-poster' src={this.buildPosterUrl()} />\r\n                </ListGroup.Item>\r\n                {this.buildJsx()}\r\n            </ListGroup>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchResultItem;","import React from 'react';\r\nimport './styles/SearchResultsPage.css';\r\nimport Container from 'react-bootstrap/Container'; //sourced from https://react-bootstrap.github.io/layout/grid/\r\nimport Image from 'react-bootstrap/Image'; //sourced from https://react-bootstrap.netlify.app/components/images/\r\nimport ExpandedResult from './ExpandedResult';\r\nimport SearchResultItem from './SearchResultItem';\r\n\r\nclass SearchResultsPage extends React.Component {\r\n    state = {\r\n        isShowingExpandedResult: false,\r\n        expandedResultData: {}\r\n    }\r\n\r\n    //handler function for SearchResultItem onClick. Results in ExpandedResult being displayed\r\n    handleExpandResult = (item) => {\r\n        this.setState({\r\n            isShowingExpandedResult: true,\r\n            expandedResultData: item\r\n        });\r\n    }\r\n\r\n    //handler function for 'Return to Results' button. Results in SearchResultsPage being restored after viewing an ExpandedResult\r\n    handleReturnFromExpandedResult = () => {\r\n        this.setState({\r\n            isShowingExpandedResult: false,\r\n            expandedResultData: {}\r\n        });\r\n    }\r\n\r\n    //switch between ExpandedResult and list of SearchResultItem components\r\n    buildPageJsx() {\r\n        if (this.state.isShowingExpandedResult)  //create ExpandedResult if that's what we're currently showing\r\n            return <ExpandedResult data={this.state.expandedResultData} handleReturnToResults={this.handleReturnFromExpandedResult} />;\r\n        else { //otherwise, create SearchResultItem list\r\n            return (\r\n                <>\r\n                    {this.props.searchData.map((item, index) =>\r\n                        <SearchResultItem data={item} key={index} expandResult={this.handleExpandResult} />\r\n                    )}\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        window.scrollTo(0, 0);\r\n\r\n        return (\r\n            <>\r\n                <Container className='results-section m-1 mx-auto' fluid>\r\n                    {this.buildPageJsx()}\r\n                    <div className='footer-text'>This product uses the <a className='tmdb-link' href='https://www.themoviedb.org/documentation/api' rel='noreferrer' target='_blank'>TMDb API</a> but is not endorsed or certified by TMDb.</div>\r\n                    <Image className='attribution-logo pt-2' src='https://www.themoviedb.org/assets/2/v4/logos/v2/blue_short-8e7b30f73a4020692ccca9c88bafe5dcb6f8a62a4c6bc55cd9ba82bb2cd95f6c.svg' />\r\n                </Container>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchResultsPage;","import React from 'react';\nimport './styles/App.css';\nimport axios from 'axios';\nimport NavigationBar from './NavigationBar'\nimport HomePage from './HomePage';\nimport SearchResultsPage from './SearchResultsPage';\n\nconst SECRET_API_KEY = '8aaeb5fa2472dd850f957c983d0bb2e1';\nconst API_BASE_URL = 'https://api.themoviedb.org/3/';\n\nclass App extends React.Component {\n  state = {\n    isShowingResults: false,\n    searchData: {}\n  }\n\n  //handler function for \"TV & Movie Searching App\" link on NavigationBar; returns to HomePage\n  returnToHomePage = () => {\n    this.setState({\n      isShowingResults: false,\n      searchData: {}\n    });\n  }\n\n  //1st AJAX Request: fetch array of search results based on user-provided query string\n  searchRequest = async (query) => {\n    this.returnToHomePage(); //always return to home page before processing search query to ensure NavigationBar search box behaves as expected\n\n    if (query !== '') { //make AJAX request only if the query is not empty\n      const searchRequestUrl = API_BASE_URL + 'search/multi?api_key=' + SECRET_API_KEY + '&language=en-US&query=' + query + '&page=1&include_adult=false';\n\n      try {\n        const response = await axios.get(searchRequestUrl);\n\n        this.setState({\n          isShowingResults: true,\n          searchData: response.data.results\n        });\n      }\n      catch (error) {\n        console.log(error);\n      }\n    }\n  }\n\n  //switch between HomePage and SearchResultsPage Components\n  displayPage() {\n    if (this.state.isShowingResults)\n      return <SearchResultsPage searchData={this.state.searchData} />;\n    else\n      return <HomePage searchRequest={this.searchRequest} />;\n  }\n\n  render() {\n    return (\n      <>\n        <NavigationBar searchRequest={this.searchRequest} returnToHomePage={this.returnToHomePage} />\n        {this.displayPage()}\n      </>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.min.css'; //sourced from https://react-bootstrap.netlify.app/getting-started/introduction/#css\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}