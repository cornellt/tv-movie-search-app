{"version":3,"sources":["components/SearchBox.js","components/NavigationBar.js","components/HomeSearchBox.js","components/HomePage.js","components/Recommendation.js","components/ExpandedResult.js","components/SearchResultItem.js","components/SearchResultsPage.js","components/App.js","index.js"],"names":["SearchBox","handleChange","input","props","onSearchBoxChange","target","value","Form","onSubmit","this","handleSubmit","Control","className","size","htmlSize","type","placeholder","onChange","inputText","React","Component","NavigationBar","event","preventDefault","searchRequest","Navbar","fixed","bg","variant","Brand","onClick","returnToHomePage","Nav","Button","HomeSearchBox","HomePage","Image","src","Container","fluid","id","href","rel","Recommendation","handleChangeFocus","data","path","recommendationData","Card","Img","buildBackdropUrl","backdrop_path","Body","Title","media_type","name","title","Text","overview","index","ExpandedResult","state","expandedData","recommendations","itemToFocus","fetchData","handleReturnToResults","a","resultDetailsRequestUrl","API_BASE_URL","axios","get","response","setState","results","console","log","result","resultType","resultPosterPath","poster_path","profile_path","Intl","NumberFormat","style","currency","format","runtime","Math","floor","dateString","formattedDateSplit","Date","toDateString","split","budget","formatCurrency","revenue","net","formattedNet","netStyling","resultName","resultPrimaryInfo","resultOverview","biography","formatDate","release_date","formatRuntime","buildGenreList","buildHomepageJsx","buildBudgetJsx","buildBoxOfficeJsx","buildNetProfitJsx","first_air_date","last_air_date","in_production","number_of_seasons","number_of_episodes","buildSeasonsTable","seasons","seasonArray","forEach","element","season_number","push","Table","striped","bordered","map","item","episode_count","genres","length","genreString","substr","homepage","Footer","CardColumns","compileMovieData","compileTvShowData","compilePersonData","window","scrollTo","compiledItemJsx","compileItemJsx","Row","Col","lg","tagline","buildPosterUrl","buildRecommendationSectionJsx","POSTER_BASE_URL","PLACEHOLDER_POSTER_URL","SearchResultItem","handleClick","expandResult","popularContributions","known_for","contributionTitle","contribution","resultTitle","resultRelease","formattedReleaseDate","ListGroup","Item","buildContributionList","known_for_department","horizontal","buildContributionPosterUrl","buildJsx","SearchResultsPage","isShowingExpandedResult","expandedResultData","handleExpandResult","handleReturnFromExpandedResult","searchData","buildPageJsx","SECRET_API_KEY","App","isShowingResults","searchBoxInput","handleChangeSearchInput","query","searchRequestUrl","displayPage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21228c12.chunk.js","sourcesContent":["import React from 'react';\r\nimport Form from 'react-bootstrap/Form'; //sourced from https://react-bootstrap.netlify.app/components/forms/\r\n\r\nclass SearchBox extends React.Component {\r\n    //handle input text-box value changing\r\n    handleChange = (input) => {\r\n        this.props.onSearchBoxChange(input.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form onSubmit={this.props.handleSubmit}>\r\n                <Form.Control className='border border-secondary text-center' size={this.props.size} htmlSize='36' type='text' placeholder='Search for a TV show, Movie, or Actor' onChange={this.handleChange} value={this.props.inputText} />\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport './styles/NavigationBar.css';\r\nimport SearchBox from './SearchBox';\r\nimport Nav from 'react-bootstrap/Nav' //sourced from https://react-bootstrap.netlify.app/components/navs/\r\nimport Navbar from 'react-bootstrap/Navbar' //sourced from https://react-bootstrap.netlify.app/components/navbar/\r\nimport Button from 'react-bootstrap/Button'; //sourced from https://react-bootstrap.netlify.app/components/buttons/\r\n\r\nclass NavigationBar extends React.Component {\r\n    //handle Search form submission    \r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.searchRequest(this.props.inputText);\r\n    }\r\n\r\n    //Navbar component sourced from react-bootstrap\r\n    render() {\r\n        return (\r\n            <Navbar fixed='top' bg='dark' variant='dark' className='mb-3'>\r\n                <Navbar.Brand className='home-button' onClick={this.props.returnToHomePage}>TV & Movie Searching App</Navbar.Brand>\r\n                <Nav className='mr-auto'>\r\n                </Nav>\r\n\r\n                <SearchBox size='md' handleSubmit={this.handleSubmit} onSearchBoxChange={this.props.onSearchBoxChange} inputText={this.props.inputText} />\r\n                <Button className='mx-2' variant='outline-secondary' onClick={this.handleSubmit}>Search</Button>\r\n            </Navbar >\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavigationBar;","import React from 'react';\r\nimport './styles/HomeSearchBox.css';\r\nimport SearchBox from './SearchBox';\r\nimport Button from 'react-bootstrap/Button'; //sourced from https://react-bootstrap.netlify.app/components/buttons/\r\n\r\nclass HomeSearchBox extends React.Component {\r\n\r\n    //handle Search form submission    \r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.searchRequest(this.props.inputText);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <SearchBox size='lg' handleSubmit={this.handleSubmit} onSearchBoxChange={this.props.onSearchBoxChange} inputText={this.props.inputText} />\r\n                <Button variant='secondary' onClick={this.handleSubmit} className='m-2'>Search</Button>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomeSearchBox;","import React from 'react';\r\nimport './styles/HomePage.css';\r\nimport HomeSearchBox from './HomeSearchBox';\r\nimport Container from 'react-bootstrap/Container'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport Image from 'react-bootstrap/Image'; //sourced from https://react-bootstrap.netlify.app/components/images/\r\n\r\nconst HomePage = props => {\r\n    const backgroundImageUrl = 'https://images.unsplash.com/photo-1489599849927-2ee91cede3ba?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1350&q=80'; //background image sourced from unsplash.com\r\n\r\n    return (\r\n        <>\r\n            <Image className='hero-img' src={backgroundImageUrl} />\r\n            <Container fluid id='container'>\r\n                <Container fluid className='w-75 search-area'>\r\n                    <HomeSearchBox searchRequest={props.searchRequest} onSearchBoxChange={props.onSearchBoxChange} inputText={props.inputText} />\r\n                </Container>\r\n            </Container>\r\n            <footer className='footer footer-dark'>\r\n                <span className='footer-text'>This product uses the <a className='tmdb-link' href='https://www.themoviedb.org/documentation/api' rel='noreferrer' target='_blank'>TMDb API</a> but is not endorsed or certified by TMDb.</span>\r\n            </footer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default HomePage;","import React from 'react';\r\nimport Card from 'react-bootstrap/Card'; //sourced from https://react-bootstrap.netlify.app/components/cards/\r\n\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500';\r\nconst PLACEHOLDER_POSTER_URL = 'https://fakeimg.pl/640x360'; //placeholder sourced from https://fakeimg.pl/640x360\r\n\r\nclass Recommendation extends React.Component {\r\n    //handler for Recommendation onClick; changes \"focused\" ExpandedResult\r\n    handleChangeFocus = () => this.props.handleChangeFocus(this.props.data);\r\n\r\n    //build URL to access movie/tv \"backdrop\" image\r\n    buildBackdropUrl(path) {\r\n        return path === null ? PLACEHOLDER_POSTER_URL : POSTER_BASE_URL + path;\r\n    }\r\n\r\n    render() {\r\n        const recommendationData = this.props.data;\r\n\r\n        return (\r\n            <>\r\n                <Card key={this.props.index} className='recommendation-card shadow-sm' onClick={this.handleChangeFocus}>\r\n                    <Card.Img variant=\"top\" src={this.buildBackdropUrl(recommendationData.backdrop_path)} />\r\n                    <Card.Body>\r\n                        <Card.Title>{recommendationData.media_type === 'tv' ? recommendationData.name : recommendationData.title}</Card.Title>\r\n                        <Card.Text className='text-muted'>{recommendationData.overview}</Card.Text>\r\n                    </Card.Body>\r\n                </Card>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Recommendation;","import React from 'react';\r\nimport axios from 'axios';\r\nimport './styles/ExpandedResult.css';\r\nimport Recommendation from './Recommendation';\r\nimport Button from 'react-bootstrap/Button'; //sourced from https://react-bootstrap.netlify.app/components/buttons/\r\nimport Card from 'react-bootstrap/Card'; //sourced from https://react-bootstrap.netlify.app/components/cards/\r\nimport Col from 'react-bootstrap/Col'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport Row from 'react-bootstrap/Row'; //sourced from https://react-bootstrap.netlify.app/layout/grid/\r\nimport Table from 'react-bootstrap/Table'; //sourced from https://react-bootstrap.netlify.app/components/table/\r\nimport CardColumns from 'react-bootstrap/CardColumns'; //sourced from https://react-bootstrap.netlify.app/components/cards/#card-columns\r\n\r\nconst SECRET_API_KEY = '8aaeb5fa2472dd850f957c983d0bb2e1';\r\nconst API_BASE_URL = 'https://api.themoviedb.org/3/';\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\r\nconst PLACEHOLDER_POSTER_URL = 'https://i2.wp.com/www.theatrecr.org/wp-content/uploads/2016/01/poster-placeholder.png?ssl=1'; //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n\r\nclass ExpandedResult extends React.Component {\r\n    state = {\r\n        expandedData: {},\r\n        recommendations: []\r\n    }\r\n\r\n    //make AJAX request when component loads\r\n    componentDidMount() { this.fetchData(this.props.data); }\r\n\r\n    //handle changing \"focused\" ExpandedResult item (occurs when a recommendation is clicked on)\r\n    handleChangeFocus = (itemToFocus) => this.fetchData(itemToFocus);\r\n\r\n    //handler for 'Return to Results' button; closes ExpandedResult and restores SearchResultsPage\r\n    handleReturnToResults = () => this.props.handleReturnToResults();\r\n\r\n    //2nd AJAX Request: fetch full data for \"expanded\" Movie/TV Show/Person + appended recommendations data\r\n    async fetchData(data) {\r\n        const resultDetailsRequestUrl = API_BASE_URL + data.media_type + '/' + data.id + '?api_key=' + SECRET_API_KEY + '&language=en-US&append_to_response=recommendations,credits';\r\n\r\n        try {\r\n            const response = await axios.get(resultDetailsRequestUrl);\r\n\r\n            this.setState({\r\n                expandedData: response.data,\r\n                recommendations: (response.data.recommendations) ? response.data.recommendations.results : [] //recommendations only exist for Movies/TV Shows (so we only update recommendations if the data exists)\r\n            });\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    //build URL to access movie/tv poster or person portrait\r\n    buildPosterUrl() {\r\n        const result = this.state.expandedData;\r\n        const resultType = this.props.data.media_type;\r\n        const resultPosterPath = ((resultType === 'movie' || resultType === 'tv') ? result.poster_path : result.profile_path);\r\n\r\n        return resultPosterPath ? (POSTER_BASE_URL + resultPosterPath) : PLACEHOLDER_POSTER_URL;\r\n    }\r\n\r\n    //return formatted String for each media_type\r\n    resultType() {\r\n        const resultType = this.props.data.media_type;\r\n\r\n        if (resultType === 'movie')\r\n            return 'Movie';\r\n        else if (resultType === 'tv')\r\n            return 'TV Show';\r\n        else if (resultType === 'person')\r\n            return 'Person';\r\n    }\r\n\r\n    //convert plain currency number into formatted string\r\n    //formatting syntax sourced from https://www.samanthaming.com/tidbits/30-how-to-format-currency-in-es6/\r\n    formatCurrency(value) {\r\n        return new Intl.NumberFormat('en-US',\r\n            { style: 'currency', currency: 'USD' }\r\n        ).format(value);\r\n    }\r\n\r\n    //convert mins to hr:min\r\n    formatRuntime(runtime) {\r\n        if (runtime && runtime > 59) {\r\n            return `${Math.floor(runtime / 60)} hrs, ${runtime % 60} min`;\r\n        }\r\n\r\n        return `${runtime} min`;\r\n    }\r\n\r\n    //returns a formatted date string based on the ISO Date provided by the API\r\n    formatDate(dateString) {\r\n        const date = new Date(dateString);\r\n        const formattedDateStr = date.toDateString();\r\n        const formattedDateSplit = formattedDateStr.split(' ');\r\n        return `${formattedDateSplit[2]} ${formattedDateSplit[1]} ${formattedDateSplit[3]}`;\r\n    }\r\n\r\n    //if budget data exists, build and return formatted budget info\r\n    buildBudgetJsx(result) {\r\n        if (result.budget && result.budget > 0) {\r\n            const budget = this.formatCurrency(result.budget);\r\n            return <h5>Budget: {budget}</h5>;\r\n        }\r\n    }\r\n\r\n    //if revenue data exists, build and return formatted revenue info\r\n    buildBoxOfficeJsx(result) {\r\n        if (result.revenue && result.revenue > 0) {\r\n            const revenue = this.formatCurrency(result.revenue);\r\n            return <h5>Box Office Revenue: {revenue}</h5>;\r\n        }\r\n    }\r\n\r\n    //if both budget and revenue data exist, build and return net profit info with appropriate styling based on positive/negative value\r\n    buildNetProfitJsx(result) {\r\n        if ((result.revenue && result.revenue > 0) && (result.budget && result.budget > 0)) {\r\n            const net = (result.revenue - result.budget);\r\n            const formattedNet = this.formatCurrency(net);\r\n            const netStyling = (net >= 0) ? 'net-positive' : 'net-negative';\r\n            return <h5 className={netStyling}>Net Income: {formattedNet}</h5>;\r\n        }\r\n    }\r\n\r\n    //returns Object containing some compiled Person info/JSX for compileItemJsx() function\r\n    compilePersonData(result) {\r\n        return {\r\n            resultName: result.name,\r\n            resultPrimaryInfo: <h4>Biography</h4>,\r\n            resultOverview: <Card.Text className='w-75 mx-auto'>{result.biography}</Card.Text>\r\n            //TODO: include clickable Popular Contribution cards\r\n        }\r\n    }\r\n\r\n    //returns Object containing some compiled Movie info/JSX for compileItemJsx() function\r\n    compileMovieData(result) {\r\n        return {\r\n            resultName: result.title,\r\n            resultPrimaryInfo: (\r\n                <>\r\n                    <h3>Release Date: {this.formatDate(result.release_date)}</h3>\r\n                    {(result.runtime > 0) ? (<h5>Runtime: {this.formatRuntime(result.runtime)}</h5>) : null}\r\n                    {this.buildGenreList(result)}\r\n                    {this.buildHomepageJsx(result)}\r\n                    <hr />\r\n                    <span className='text-right'>\r\n                        {this.buildBudgetJsx(result)}\r\n                        {this.buildBoxOfficeJsx(result)}\r\n                        {this.buildNetProfitJsx(result)}\r\n                    </span>\r\n                    <hr />\r\n                    <h4>Overview</h4>\r\n                </>\r\n            ),\r\n            resultOverview: result.overview\r\n        }\r\n    }\r\n\r\n    //returns Object containing some compiled TV Show info/JSX for compileItemJsx() function\r\n    compileTvShowData(result) {\r\n        return {\r\n            resultName: result.name,\r\n            resultPrimaryInfo: (\r\n                <>\r\n                    <h3>First Air Date: {this.formatDate(result.first_air_date)}</h3>\r\n                    <h3>Last Air Date: {this.formatDate(result.last_air_date)}</h3>\r\n                    <h4>{result.in_production ? 'Still in production' : 'No longer in production'}</h4>\r\n                    {this.buildGenreList(result)}\r\n                    <br />\r\n                    <h5>Number of Seasons: {result.number_of_seasons}</h5>\r\n                    <h5>Number of Episodes: {result.number_of_episodes}</h5>\r\n                    {this.buildHomepageJsx(result)}\r\n                    <hr />\r\n                    <h4>Overview</h4>\r\n                </>\r\n            ),\r\n            resultOverview: (\r\n                <>\r\n                    <Card.Text className='w-75 mx-auto'>\r\n                        {result.overview}\r\n                    </Card.Text>\r\n                    {this.buildSeasonsTable()}\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    //Build react-bootstrap Table for TV Show seasons info\r\n    buildSeasonsTable() {\r\n        if (this.state.expandedData.seasons) {\r\n            const seasonArray = []; //const variables cannot be reassigned BUT are NOT immutable -- we can still mutate the array's properties\r\n\r\n            this.state.expandedData.seasons.forEach(element => {\r\n                if (element.season_number !== 0) //we ignore the 0th season's data because those are 'extra' episodes\r\n                    seasonArray.push(element); //append season to end of seasonArray\r\n            });\r\n\r\n            return (\r\n                <Table striped bordered size='sm' className='my-3'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Season #</th>\r\n                            <th>Episode Count</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {seasonArray.map((item, index) =>\r\n                            <tr key={index}>\r\n                                <td>{index + 1}</td>\r\n                                <td>{item.episode_count}</td>\r\n                            </tr>\r\n                        )}\r\n                    </tbody>\r\n                </Table>\r\n            );\r\n        }\r\n    }\r\n\r\n    //Build list of clickable main actors/chatacters for TV Show/Movie\r\n    buildMainCharactersList(data) {\r\n        //TODO: finish method for generating JSX for clickable Character cards\r\n        //TODO: make new 'Character' component akin to 'Recommendation.js'\r\n    }\r\n\r\n    //Build genre String + JSX for TV Show/Movie\r\n    buildGenreList(data) {\r\n        if (data.genres && data.genres.length > 0) {\r\n            let genreString = 'Genre(s): '\r\n\r\n            for (const genre of data.genres) {\r\n                genreString += (genre.name + ', ');\r\n            }\r\n\r\n            genreString = genreString.substr(0, genreString.length - 2);\r\n            return <h5>{genreString}</h5>;\r\n        }\r\n    }\r\n\r\n    //if homepage link exists, build and return corresponding JSX object\r\n    buildHomepageJsx(result) {\r\n        if ((result.homepage !== null) && (result.homepage !== ''))\r\n            return <h5><a href={result.homepage} target='_blank' rel=\"noreferrer\">Link to Homepage</a></h5>;\r\n    }\r\n\r\n    //if recommendations exist, build and return Recommendations Section JSX object\r\n    buildRecommendationSectionJsx() {\r\n        if (this.state.recommendations.length > 0) { //only build Recommendation section if recommendations exist\r\n            return (\r\n                <Card.Footer>\r\n                    <Card.Title className='mx-auto'><h2>You Might Also Be Interested In</h2></Card.Title>\r\n                    <CardColumns>\r\n                        {this.state.recommendations.map((item, index) =>\r\n                            <Recommendation key={index} index={index} data={item} handleChangeFocus={this.handleChangeFocus} />\r\n                        )}\r\n                    </CardColumns>\r\n                </Card.Footer>\r\n            );\r\n        }\r\n    }\r\n\r\n    //call appropriate compileData method based on media_type\r\n    compileItemJsx() {\r\n        const resultType = this.props.data.media_type;\r\n\r\n        if (resultType === 'movie')\r\n            return this.compileMovieData(this.state.expandedData);\r\n        else if (resultType === 'tv')\r\n            return this.compileTvShowData(this.state.expandedData);\r\n        else if (resultType === 'person')\r\n            return this.compilePersonData(this.state.expandedData);\r\n    }\r\n\r\n    render() {\r\n        window.scrollTo(0, 0);\r\n        const compiledItemJsx = this.compileItemJsx();\r\n\r\n        console.log(this.state.expandedData); //TODO: remove this\r\n\r\n        return (\r\n            <Card className='mx-auto my-3 outer-result-card'>\r\n                <Card className='inner-result-card'>\r\n                    <Button className='mx-auto' variant=\"primary\" onClick={this.handleReturnToResults}>Return to Search Results</Button>\r\n                    <Row>\r\n                        <Col lg className='mx-2'>\r\n                            <Card.Title className='mb-0 mt-1'>\r\n                                <Card.Text className='text-muted'>{this.state.expandedData.tagline}</Card.Text>\r\n                                <Card.Img className='mx-auto my-2 poster w-75' variant=\"top\" src={this.buildPosterUrl()} />\r\n                            </Card.Title>\r\n                        </Col>\r\n                        <Col lg className='mx-auto'>\r\n                            <Card.Body>\r\n                                <Card.Title>\r\n                                    <h1 className='display-4'>{compiledItemJsx.resultName}</h1>\r\n                                    <h5 className='text-muted'>{this.resultType()}</h5>\r\n                                    <hr />\r\n                                    {compiledItemJsx.resultPrimaryInfo}\r\n                                </Card.Title>\r\n                                {compiledItemJsx.resultOverview}\r\n                            </Card.Body>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className='mx-auto my-2'>\r\n                        <Button variant=\"primary\" onClick={this.handleReturnToResults}>Return to Search Results</Button>\r\n                    </Row>\r\n                </Card>\r\n                {this.buildRecommendationSectionJsx()}\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExpandedResult;","import React from 'react';\r\nimport './styles/SearchResultItem.css';\r\nimport ListGroup from 'react-bootstrap/ListGroup'; //sourced from https://react-bootstrap.netlify.app/components/list-group/\r\nimport Image from 'react-bootstrap/Image'; //sourced from https://react-bootstrap.netlify.app/components/images/\r\n\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\r\nconst PLACEHOLDER_POSTER_URL = 'https://i2.wp.com/www.theatrecr.org/wp-content/uploads/2016/01/poster-placeholder.png?ssl=1'; //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n\r\nclass SearchResultItem extends React.Component {\r\n    //handle expanding a search result item\r\n    handleClick = () => {\r\n        this.props.expandResult(this.props.data);\r\n    }\r\n\r\n    //return formatted String for each media_type\r\n    resultType() {\r\n        const resultType = this.props.data.media_type;\r\n\r\n        if (resultType === 'movie')\r\n            return 'Movie';\r\n        else if (resultType === 'tv')\r\n            return 'TV Show';\r\n        else if (resultType === 'person')\r\n            return 'Person';\r\n    }\r\n\r\n    //build contributions array for 'Person' search result item\r\n    buildContributionList(result) {\r\n        let popularContributions = [];\r\n\r\n        result.known_for.forEach((item) => {\r\n            let contributionTitle;\r\n\r\n            if (item.media_type === 'movie')\r\n                contributionTitle = item.title;\r\n            else if (item.media_type === 'tv')\r\n                contributionTitle = item.name;\r\n\r\n            const contribution = {\r\n                title: contributionTitle,\r\n                data: item\r\n            }\r\n            popularContributions = [...popularContributions, contribution];\r\n        });\r\n\r\n        return popularContributions;\r\n    }\r\n\r\n    //build URL to access movie/tv poster or person portrait\r\n    buildPosterUrl() {\r\n        const result = this.props.data;\r\n        const resultType = this.props.data.media_type;\r\n        const resultPosterPath = ((resultType === 'movie' || resultType === 'tv') ? result.poster_path : result.profile_path);\r\n\r\n        //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n        return (resultPosterPath) ? (POSTER_BASE_URL + resultPosterPath) : PLACEHOLDER_POSTER_URL;\r\n    }\r\n\r\n    //build URL for a Person's Popular Contribution based on provided poster_path\r\n    buildContributionPosterUrl(item) {\r\n        const resultType = item.data.media_type;\r\n        const resultPosterPath = ((resultType === 'movie' || resultType === 'tv') ? item.data.poster_path : item.data.profile_path);\r\n\r\n        //poster placeholder sourced from https://www.theatrecr.org/poster-placeholder/\r\n        return (resultPosterPath) ? (POSTER_BASE_URL + resultPosterPath) : PLACEHOLDER_POSTER_URL;\r\n    }\r\n\r\n    //returns a formatted date string based on the ISO Date provided by the API\r\n    formatDate(dateString) {\r\n        const date = new Date(dateString);\r\n        const formattedDateStr = date.toDateString();\r\n        const formattedDateSplit = formattedDateStr.split(' ');\r\n        return `${formattedDateSplit[2]} ${formattedDateSplit[1]} ${formattedDateSplit[3]}`;\r\n    }\r\n\r\n    //build JSX object based on media_type of search result item\r\n    buildJsx() {\r\n        const result = this.props.data;\r\n        const resultType = result.media_type;\r\n\r\n        const resultTitle = (resultType === 'movie') ? result.title : result.name;\r\n\r\n        const resultRelease = (resultType === 'movie' || resultType === 'tv') ? (resultType === 'movie' ? result.release_date : result.first_air_date) : {};\r\n        const formattedReleaseDate = this.formatDate(resultRelease);\r\n\r\n        if (resultType === 'movie' || resultType === 'tv') {\r\n            return (\r\n                <>\r\n                    <ListGroup.Item className='w-25'><span className='text-muted'>Title</span><hr /><em>{resultTitle}</em></ListGroup.Item>\r\n                    <ListGroup.Item className='w-25'><span className='text-muted'>Release Date</span><hr />{formattedReleaseDate}</ListGroup.Item>\r\n                    <ListGroup.Item className='w-50'><span className='text-muted'>Overview</span><hr />{result.overview}</ListGroup.Item>\r\n                </>\r\n            );\r\n        }\r\n        else if (resultType === 'person') {\r\n            const popularContributions = this.buildContributionList(result);\r\n\r\n            return (\r\n                <>\r\n                    <ListGroup.Item className='w-25'><span className='text-muted'>Name</span><hr />{resultTitle}</ListGroup.Item>\r\n                    <ListGroup.Item className='w-25'><span className='text-muted'>Known for</span><hr />{result.known_for_department}</ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <span className='text-muted'>Popular Contributions</span>\r\n                        <hr />\r\n                        <ListGroup horizontal>\r\n                            {popularContributions.map((item, index) =>\r\n                                <ListGroup.Item key={index} className='d-inline-block'>\r\n                                    <div><em>{item.title}</em></div>\r\n                                    <Image className='mx-auto known-for-poster' src={this.buildContributionPosterUrl(item)}></Image>\r\n                                </ListGroup.Item>\r\n                            )}\r\n                        </ListGroup>\r\n                    </ListGroup.Item>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ListGroup horizontal='lg' className='m-1 p-1 list-item mx-auto' onClick={this.handleClick}>\r\n                <ListGroup.Item>{this.resultType()}</ListGroup.Item>\r\n                <ListGroup.Item>\r\n                    <Image className='mx-auto small-poster' src={this.buildPosterUrl()} />\r\n                </ListGroup.Item>\r\n                {this.buildJsx()}\r\n            </ListGroup>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchResultItem;","import React from 'react';\r\nimport './styles/SearchResultsPage.css';\r\nimport Container from 'react-bootstrap/Container'; //sourced from https://react-bootstrap.github.io/layout/grid/\r\nimport Image from 'react-bootstrap/Image'; //sourced from https://react-bootstrap.netlify.app/components/images/\r\nimport ExpandedResult from './ExpandedResult';\r\nimport SearchResultItem from './SearchResultItem';\r\n\r\nclass SearchResultsPage extends React.Component {\r\n    state = {\r\n        isShowingExpandedResult: false,\r\n        expandedResultData: {}\r\n    }\r\n\r\n    //handler function for SearchResultItem onClick. Results in ExpandedResult being displayed\r\n    handleExpandResult = (item) => {\r\n        this.setState({\r\n            isShowingExpandedResult: true,\r\n            expandedResultData: item\r\n        });\r\n    }\r\n\r\n    //handler function for 'Return to Results' button. Results in SearchResultsPage being restored after viewing an ExpandedResult\r\n    handleReturnFromExpandedResult = () => {\r\n        this.setState({\r\n            isShowingExpandedResult: false,\r\n            expandedResultData: {}\r\n        });\r\n    }\r\n\r\n    //switch between ExpandedResult and list of SearchResultItem components\r\n    buildPageJsx() {\r\n        if (this.state.isShowingExpandedResult)  //create ExpandedResult if that's what we're currently showing\r\n            return <ExpandedResult data={this.state.expandedResultData} handleReturnToResults={this.handleReturnFromExpandedResult} />;\r\n        else { //otherwise, create SearchResultItem list\r\n            return (\r\n                <>\r\n                    {this.props.searchData.map((item, index) =>\r\n                        <SearchResultItem data={item} key={index} expandResult={this.handleExpandResult} />\r\n                    )}\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        window.scrollTo(0, 0);\r\n\r\n        return (\r\n            <>\r\n                <Container className='results-section m-1 mx-auto' fluid>\r\n                    {this.buildPageJsx()}\r\n                    <div className='footer-text'>This product uses the <a className='tmdb-link' href='https://www.themoviedb.org/documentation/api' rel='noreferrer' target='_blank'>TMDb API</a> but is not endorsed or certified by TMDb.</div>\r\n                    <Image className='attribution-logo pt-2' src='https://www.themoviedb.org/assets/2/v4/logos/v2/blue_short-8e7b30f73a4020692ccca9c88bafe5dcb6f8a62a4c6bc55cd9ba82bb2cd95f6c.svg' />\r\n                </Container>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchResultsPage;","import React from 'react';\r\nimport axios from 'axios';\r\nimport './styles/App.css';\r\nimport NavigationBar from './NavigationBar';\r\nimport HomePage from './HomePage';\r\nimport SearchResultsPage from './SearchResultsPage';\r\n\r\nconst SECRET_API_KEY = '8aaeb5fa2472dd850f957c983d0bb2e1';\r\nconst API_BASE_URL = 'https://api.themoviedb.org/3/';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    isShowingResults: false,\r\n    searchData: {},\r\n    searchBoxInput: ''\r\n  }\r\n\r\n  //handler function for changing input in search box, either on homepage or on the navbar\r\n  handleChangeSearchInput = (input) => {\r\n    this.setState({ searchBoxInput: input });\r\n  }\r\n\r\n  //handler function for \"TV & Movie Searching App\" link on NavigationBar; returns to HomePage\r\n  returnToHomePage = () => {\r\n    this.setState({\r\n      isShowingResults: false,\r\n      searchData: {}\r\n    });\r\n  }\r\n\r\n  //1st AJAX Request: fetch array of search results based on user-provided query string\r\n  searchRequest = async (query) => {\r\n    this.returnToHomePage(); //always return to home page before processing search query to ensure NavigationBar search box behaves as expected\r\n\r\n    if (query !== '') { //make AJAX request only if the query is not empty\r\n      this.setState({ searchBoxInput: '' });\r\n      const searchRequestUrl = API_BASE_URL + 'search/multi?api_key=' + SECRET_API_KEY + '&language=en-US&query=' + query + '&page=1&include_adult=false';\r\n\r\n      try {\r\n        const response = await axios.get(searchRequestUrl);\r\n\r\n        this.setState({\r\n          isShowingResults: true,\r\n          searchData: response.data.results\r\n        });\r\n      }\r\n      catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  }\r\n\r\n  //switch between HomePage and SearchResultsPage Components\r\n  displayPage() {\r\n    if (this.state.isShowingResults)\r\n      return <SearchResultsPage searchData={this.state.searchData} />;\r\n    else\r\n      return <HomePage searchRequest={this.searchRequest} onSearchBoxChange={this.handleChangeSearchInput} inputText={this.state.searchBoxInput} />;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <NavigationBar searchRequest={this.searchRequest} returnToHomePage={this.returnToHomePage} onSearchBoxChange={this.handleChangeSearchInput} inputText={this.state.searchBoxInput} />\r\n        {this.displayPage()}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.min.css'; //sourced from https://react-bootstrap.netlify.app/getting-started/introduction/#css\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}